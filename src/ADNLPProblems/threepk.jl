export threepk

function threepk(; n::Int = default_nvar, type::Val{T} = Val(Float64), kwargs...) where {T}

  npkc  = 3
  npkcm1  = -1 + 3
  npkcp1  = 1 + 3
  ncent  = 6
  ncentm1  = -1 + 6
  rncentm1  = 5
  gamma  = 10000
  ft0  = 1 // 2
  ft1  = 1 // 2
  ft2  = 1 // 2
  wft0  = 1
  wft1  = 1
  wft2  = 1
  count  = 9
  countm1  = -1 + (9)
  defw  = 999999953 // 1000000
  cou0  = 910
  cou1  = 175
  cou2  = 1915
  cou3  = 450
  cou4  = 260
  cou5  = 80
  cou6  = 670
  cou7  = 1450
  cou8  = 990
  phi0  = 1 // 10000
  phi1  = 1 // 10000
  phi2  = 1 // 10000
  phi3  = 1 // 10000
  phi4  = 1 // 10000
  phi5  = 1 // 10000
  phi6  = 1 // 10000
  phi7  = 1 // 10000
  phi8  = 1 // 10000
  jp1  = 1 + (5)
  jm1  = -1 + (5)
  tmp  = 1 // 80
  tmp1  = 20 // 80

  function f(x)
    Tx = eltype(x)
    a1_0, a2_0, a3_0, a4_0, a5_0, a0_1, a2_1, a3_1, a4_1, a5_1, a0_2, a1_2, a3_2, a4_2, a5_2, t0_3, t1_3, t2_3, t4_3, t5_3, t0_4, t1_4, t2_4, t3_4, t5_4, t0_5, t1_5, t2_5, t3_5, t4_5 = x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19], x[20], x[21], x[22], x[23], x[24], x[25], x[26], x[27], x[28], x[29], x[30]
    return     (Tx(0.01)*t0_3 - Tx(1.0))*(Tx(0.01)*t0_3 - Tx(1.0)) + (Tx(0.007143)*t1_3 - Tx(1.0))*(Tx(0.007143)*t1_3 -
    Tx(1.0)) + (Tx(0.008333)*t2_3 - Tx(1.0))*(Tx(0.008333)*t2_3 - Tx(1.0)) + (Tx(0.05)*t4_3 -
    Tx(1.0))*(Tx(0.05)*t4_3 - Tx(1.0)) + (Tx(0.05)*t5_3 - Tx(1.0))*(Tx(0.05)*t5_3 - Tx(1.0)) + (Tx(0.0050)*t0_4 -
    Tx(1.0))*(Tx(0.0050)*t0_4 - Tx(1.0)) + (Tx(0.005556)*t1_4 - Tx(1.0))*(Tx(0.005556)*t1_4 - Tx(1.0)) +
    (Tx(0.05)*t2_4 - Tx(1.0))*(Tx(0.05)*t2_4 - Tx(1.0)) + (Tx(0.001667)*t3_4 - Tx(1.0))*(Tx(0.001667)*t3_4 -
    Tx(1.0)) + (Tx(0.025)*t5_4 - Tx(1.0))*(Tx(0.025)*t5_4 - Tx(1.0)) + (Tx(0.02)*t0_5 - Tx(1.0))*(Tx(0.02)*t0_5 -
    Tx(1.0)) + (Tx(0.033333)*t1_5 - Tx(1.0))*(Tx(0.033333)*t1_5 - Tx(1.0)) + (Tx(0.014286)*t2_5 -
    Tx(1.0))*(Tx(0.014286)*t2_5 - Tx(1.0)) + (Tx(0.006667)*t3_5 - Tx(1.0))*(Tx(0.006667)*t3_5 - Tx(1.0)) +
    (Tx(0.05)*t4_5 - Tx(1.0))*(Tx(0.05)*t4_5 - Tx(1.0)) + (Tx(0.4)*a1_0 + Tx(0.4)*a2_0 + Tx(0.4)*a3_0 +
    Tx(0.4)*a4_0 + Tx(0.4)*a5_0 - Tx(1.0))*(Tx(0.4)*a1_0 + Tx(0.4)*a2_0 + Tx(0.4)*a3_0 + Tx(0.4)*a4_0 +
    Tx(0.4)*a5_0 - Tx(1.0)) + (Tx(0.4)*a0_1 + Tx(0.4)*a2_1 + Tx(0.4)*a3_1 + Tx(0.4)*a4_1 + Tx(0.4)*a5_1 -
    Tx(1.0))*(Tx(0.4)*a0_1 + Tx(0.4)*a2_1 + Tx(0.4)*a3_1 + Tx(0.4)*a4_1 + Tx(0.4)*a5_1 - Tx(1.0)) + (Tx(0.4)*a0_2 +
    Tx(0.4)*a1_2 + Tx(0.4)*a3_2 + Tx(0.4)*a4_2 + Tx(0.4)*a5_2 - Tx(1.0))*(Tx(0.4)*a0_2 + Tx(0.4)*a1_2 +
    Tx(0.4)*a3_2 + Tx(0.4)*a4_2 + Tx(0.4)*a5_2 - Tx(1.0)) + (((Tx(0.26373626373626374)*a0_1 +
    Tx(0.43956043956043955)*a2_1 + Tx(0.46153846153846156)*a3_1 + Tx(0.1978021978021978)*a4_1 +
    Tx(0.3516483516483517)*a5_1 + Tx(0.02197802197802198)*a0_2 + Tx(0.04395604395604396)*a3_2 +
    Tx(0.001098901098901099)*t0_5 + Tx(0.001098901098901099)*t3_5 -
    Tx(1.0))*(Tx(0.26373626373626374)*a0_1 + Tx(0.43956043956043955)*a2_1 +
    Tx(0.46153846153846156)*a3_1 + Tx(0.1978021978021978)*a4_1 + Tx(0.3516483516483517)*a5_1 +
    Tx(0.02197802197802198)*a0_2 + Tx(0.04395604395604396)*a3_2 + Tx(0.001098901098901099)*t0_5
    + Tx(0.001098901098901099)*t3_5 - Tx(1.0)))/Tx(1.0e-4)) + (((Tx(0.11428571428571428)*a0_2 +
    Tx(0.34285714285714286)*a1_2 + Tx(0.22857142857142856)*a3_2 + Tx(0.005714285714285714)*t0_5
    + Tx(0.005714285714285714)*t1_5 + Tx(0.005714285714285714)*t3_5 -
    Tx(1.0))*(Tx(0.11428571428571428)*a0_2 + Tx(0.34285714285714286)*a1_2 +
    Tx(0.22857142857142856)*a3_2 + Tx(0.005714285714285714)*t0_5 +
    Tx(0.005714285714285714)*t1_5 + Tx(0.005714285714285714)*t3_5 - Tx(1.0)))/Tx(1.0e-4)) +
    (((Tx(0.10443864229765012)*a1_0 + Tx(0.2506527415143603)*a2_0 +
    Tx(0.06266318537859007)*a3_0 + Tx(0.18798955613577023)*a4_0 + Tx(0.2924281984334204)*a5_0 +
    Tx(0.20887728459530025)*a2_1 + Tx(0.2193211488250653)*a3_1 + Tx(0.09399477806788512)*a4_1 +
    Tx(0.1671018276762402)*a5_1 + Tx(0.020887728459530026)*a3_2 + Tx(5.221932114882506e-4)*t3_4
    + Tx(5.221932114882506e-4)*t3_5 - Tx(1.0))*(Tx(0.10443864229765012)*a1_0 +
    Tx(0.2506527415143603)*a2_0 + Tx(0.06266318537859007)*a3_0 + Tx(0.18798955613577023)*a4_0 +
    Tx(0.2924281984334204)*a5_0 + Tx(0.20887728459530025)*a2_1 + Tx(0.2193211488250653)*a3_1 +
    Tx(0.09399477806788512)*a4_1 + Tx(0.1671018276762402)*a5_1 + Tx(0.020887728459530026)*a3_2
    + Tx(5.221932114882506e-4)*t3_4 + Tx(5.221932114882506e-4)*t3_5 - Tx(1.0)))/Tx(1.0e-4)) +
    (((Tx(0.0022222222222222222)*t0_3 + Tx(0.0022222222222222222)*t0_4 +
    Tx(0.0022222222222222222)*t3_4 - Tx(1.0))*(Tx(0.0022222222222222222)*t0_3 +
    Tx(0.0022222222222222222)*t0_4 + Tx(0.0022222222222222222)*t3_4 - Tx(1.0)))/Tx(1.0e-4)) +
    (((Tx(0.7692307692307693)*a1_0 + Tx(0.0038461538461538464)*t1_3 +
    Tx(0.0038461538461538464)*t1_4 - Tx(1.0))*(Tx(0.7692307692307693)*a1_0 +
    Tx(0.0038461538461538464)*t1_3 + Tx(0.0038461538461538464)*t1_4 - Tx(1.0)))/Tx(1.0e-4)) +
    (((Tx(1.5)*a4_2 + Tx(0.25)*a5_2 + Tx(0.0125)*t4_5 - Tx(1.0))*(Tx(1.5)*a4_2 + Tx(0.25)*a5_2 +
    Tx(0.0125)*t4_5 - Tx(1.0)))/Tx(1.0e-4)) + (((Tx(0.7164179104477612)*a2_0 +
    Tx(0.5970149253731343)*a2_1 + Tx(0.0014925373134328358)*t2_3 +
    Tx(0.0014925373134328358)*t2_4 + Tx(0.0014925373134328358)*t0_5 +
    Tx(0.0014925373134328358)*t1_5 + Tx(0.0014925373134328358)*t2_5 +
    Tx(0.0014925373134328358)*t3_5 + Tx(0.0014925373134328358)*t4_5 -
    Tx(1.0))*(Tx(0.7164179104477612)*a2_0 + Tx(0.5970149253731343)*a2_1 +
    Tx(0.0014925373134328358)*t2_3 + Tx(0.0014925373134328358)*t2_4 +
    Tx(0.0014925373134328358)*t0_5 + Tx(0.0014925373134328358)*t1_5 +
    Tx(0.0014925373134328358)*t2_5 + Tx(0.0014925373134328358)*t3_5 +
    Tx(0.0014925373134328358)*t4_5 - Tx(1.0)))/Tx(1.0e-4)) + (((Tx(0.13793103448275862)*a1_0 +
    Tx(0.3310344827586207)*a2_0 + Tx(0.2482758620689655)*a4_0 + Tx(0.38620689655172413)*a5_0 +
    Tx(0.27586206896551724)*a2_1 + Tx(0.12413793103448276)*a4_1 + Tx(0.2206896551724138)*a5_1 +
    Tx(6.89655172413793e-4)*t0_3 + Tx(6.89655172413793e-4)*t1_3 + Tx(6.89655172413793e-4)*t2_3
    + Tx(6.89655172413793e-4)*t4_3 + Tx(6.89655172413793e-4)*t5_3 -
    Tx(1.0))*(Tx(0.13793103448275862)*a1_0 + Tx(0.3310344827586207)*a2_0 +
    Tx(0.2482758620689655)*a4_0 + Tx(0.38620689655172413)*a5_0 + Tx(0.27586206896551724)*a2_1 +
    Tx(0.12413793103448276)*a4_1 + Tx(0.2206896551724138)*a5_1 + Tx(6.89655172413793e-4)*t0_3 +
    Tx(6.89655172413793e-4)*t1_3 + Tx(6.89655172413793e-4)*t2_3 + Tx(6.89655172413793e-4)*t4_3
    + Tx(6.89655172413793e-4)*t5_3 - Tx(1.0)))/Tx(1.0e-4)) + (((Tx(0.48484848484848486)*a2_0 +
    Tx(0.5656565656565656)*a5_0 + Tx(0.40404040404040403)*a2_1 + Tx(0.32323232323232326)*a5_1 +
    Tx(0.020202020202020204)*a5_2 + Tx(0.00101010101010101)*t2_3 + Tx(0.00101010101010101)*t5_3
    + Tx(0.00101010101010101)*t2_4 + Tx(0.00101010101010101)*t5_4 -
    Tx(1.0))*(Tx(0.48484848484848486)*a2_0 + Tx(0.5656565656565656)*a5_0 +
    Tx(0.40404040404040403)*a2_1 + Tx(0.32323232323232326)*a5_1 + Tx(0.020202020202020204)*a5_2
    + Tx(0.00101010101010101)*t2_3 + Tx(0.00101010101010101)*t5_3 +
    Tx(0.00101010101010101)*t2_4 + Tx(0.00101010101010101)*t5_4 - Tx(1.0)))/Tx(1.0e-4)) +
    (((-Tx(0.8)*a1_0 + Tx(0.2)*a2_0 + Tx(0.2)*a3_0 + Tx(0.2)*a4_0 + Tx(0.2)*a5_0)*(-Tx(0.8)*a1_0 + Tx(0.2)*a2_0
    + Tx(0.2)*a3_0 + Tx(0.2)*a4_0 + Tx(0.2)*a5_0))/Tx(0.5)) + (((Tx(0.2)*a1_0 - Tx(0.8)*a2_0 + Tx(0.2)*a3_0 +
    Tx(0.2)*a4_0 + Tx(0.2)*a5_0)*(Tx(0.2)*a1_0 - Tx(0.8)*a2_0 + Tx(0.2)*a3_0 + Tx(0.2)*a4_0 +
    Tx(0.2)*a5_0))/Tx(0.5)) + (((Tx(0.2)*a1_0 + Tx(0.2)*a2_0 - Tx(0.8)*a3_0 + Tx(0.2)*a4_0 +
    Tx(0.2)*a5_0)*(Tx(0.2)*a1_0 + Tx(0.2)*a2_0 - Tx(0.8)*a3_0 + Tx(0.2)*a4_0 + Tx(0.2)*a5_0))/Tx(0.5)) +
    (((Tx(0.2)*a1_0 + Tx(0.2)*a2_0 + Tx(0.2)*a3_0 - Tx(0.8)*a4_0 + Tx(0.2)*a5_0)*(Tx(0.2)*a1_0 + Tx(0.2)*a2_0 +
    Tx(0.2)*a3_0 - Tx(0.8)*a4_0 + Tx(0.2)*a5_0))/Tx(0.5)) + (((Tx(0.2)*a1_0 + Tx(0.2)*a2_0 + Tx(0.2)*a3_0 +
    Tx(0.2)*a4_0 - Tx(0.8)*a5_0)*(Tx(0.2)*a1_0 + Tx(0.2)*a2_0 + Tx(0.2)*a3_0 + Tx(0.2)*a4_0 -
    Tx(0.8)*a5_0))/Tx(0.5)) + (((-Tx(0.8)*a0_1 + Tx(0.2)*a2_1 + Tx(0.2)*a3_1 + Tx(0.2)*a4_1 +
    Tx(0.2)*a5_1)*(-Tx(0.8)*a0_1 + Tx(0.2)*a2_1 + Tx(0.2)*a3_1 + Tx(0.2)*a4_1 + Tx(0.2)*a5_1))/Tx(0.5)) +
    (((Tx(0.2)*a0_1 - Tx(0.8)*a2_1 + Tx(0.2)*a3_1 + Tx(0.2)*a4_1 + Tx(0.2)*a5_1)*(Tx(0.2)*a0_1 - Tx(0.8)*a2_1 +
    Tx(0.2)*a3_1 + Tx(0.2)*a4_1 + Tx(0.2)*a5_1))/Tx(0.5)) + (((Tx(0.2)*a0_1 + Tx(0.2)*a2_1 - Tx(0.8)*a3_1 +
    Tx(0.2)*a4_1 + Tx(0.2)*a5_1)*(Tx(0.2)*a0_1 + Tx(0.2)*a2_1 - Tx(0.8)*a3_1 + Tx(0.2)*a4_1 +
    Tx(0.2)*a5_1))/Tx(0.5)) + (((Tx(0.2)*a0_1 + Tx(0.2)*a2_1 + Tx(0.2)*a3_1 - Tx(0.8)*a4_1 +
    Tx(0.2)*a5_1)*(Tx(0.2)*a0_1 + Tx(0.2)*a2_1 + Tx(0.2)*a3_1 - Tx(0.8)*a4_1 + Tx(0.2)*a5_1))/Tx(0.5)) +
    (((Tx(0.2)*a0_1 + Tx(0.2)*a2_1 + Tx(0.2)*a3_1 + Tx(0.2)*a4_1 - Tx(0.8)*a5_1)*(Tx(0.2)*a0_1 + Tx(0.2)*a2_1 +
    Tx(0.2)*a3_1 + Tx(0.2)*a4_1 - Tx(0.8)*a5_1))/Tx(0.5)) + (((-Tx(0.8)*a0_2 + Tx(0.2)*a1_2 + Tx(0.2)*a3_2 +
    Tx(0.2)*a4_2 + Tx(0.2)*a5_2)*(-Tx(0.8)*a0_2 + Tx(0.2)*a1_2 + Tx(0.2)*a3_2 + Tx(0.2)*a4_2 +
    Tx(0.2)*a5_2))/Tx(0.5)) + (((Tx(0.2)*a0_2 - Tx(0.8)*a1_2 + Tx(0.2)*a3_2 + Tx(0.2)*a4_2 +
    Tx(0.2)*a5_2)*(Tx(0.2)*a0_2 - Tx(0.8)*a1_2 + Tx(0.2)*a3_2 + Tx(0.2)*a4_2 + Tx(0.2)*a5_2))/Tx(0.5)) +
    (((Tx(0.2)*a0_2 + Tx(0.2)*a1_2 - Tx(0.8)*a3_2 + Tx(0.2)*a4_2 + Tx(0.2)*a5_2)*(Tx(0.2)*a0_2 + Tx(0.2)*a1_2 -
    Tx(0.8)*a3_2 + Tx(0.2)*a4_2 + Tx(0.2)*a5_2))/Tx(0.5)) + (((Tx(0.2)*a0_2 + Tx(0.2)*a1_2 + Tx(0.2)*a3_2 -
    Tx(0.8)*a4_2 + Tx(0.2)*a5_2)*(Tx(0.2)*a0_2 + Tx(0.2)*a1_2 + Tx(0.2)*a3_2 - Tx(0.8)*a4_2 +
    Tx(0.2)*a5_2))/Tx(0.5)) + (((Tx(0.2)*a0_2 + Tx(0.2)*a1_2 + Tx(0.2)*a3_2 + Tx(0.2)*a4_2 -
    Tx(0.8)*a5_2)*(Tx(0.2)*a0_2 + Tx(0.2)*a1_2 + Tx(0.2)*a3_2 + Tx(0.2)*a4_2 - Tx(0.8)*a5_2))/Tx(0.5))
  end
  x0 = T[
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    100.0,
    140.0,
    120.0,
    20.0,
    20.0,
    200.0,
    180.0,
    20.0,
    600.0,
    40.0,
    50.0,
    30.0,
    70.0,
    150.0,
    20.0,
  ]
  lvar = zeros(T, 30)
  uvar = T(Inf) * ones(T, 30)

  return ADNLPModels.ADNLPModel(f, x0, lvar, uvar, name = "threepk"; kwargs...)
end

