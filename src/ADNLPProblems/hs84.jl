export hs84 
 
function hs84(; n::Int = default_nvar, type::Val{T} = Val(Float64), kwargs...) where {T}
  a = Array{T}(undef, 21)
  a[1:7] = T[-24345, -8720288.849, 150512.5253, -156.6950325, 476470.3222, 729482.8271, -145421.402]
  a[8:14] = T[2931.1506, -40.427932, 5106.192, 15711.36, -155011.1084, 4360.53352, 12.9492344]
  a[15:21] = T[10236.884, 13176.786, -326669.5104, 7390.68412, -27.8986976, 16643.076, 30988.146]
  function f(x)
    n = length(x)
    return -a[1] - a[2] * x[1] - a[3] * x[1] * x[2] - a[4] * x[1] * x[3] - a[5] * x[1] * x[4] -
    a[6] * x[1] * x[5]
  end
  x0 = T[2.52, 2, 37.5, 9.25, 6.8]
  lvar = T[0, 1.2, 20, 9, 6.5]
  uvar = T[1000, 2.4, 60, 9.3, 7]
  function c(x)
    n = length(x)
    return [
      a[7] * x[1] +
      a[8] * x[1] * x[2] +
      a[9] * x[1] * x[3] +
      a[10] * x[1] * x[4] +
      a[11] * x[1] * x[5],
      a[12] * x[1] +
      a[13] * x[1] * x[2] +
      a[14] * x[1] * x[3] +
      a[15] * x[1] * x[4] +
      a[16] * x[1] * x[5],
      a[17] * x[1] +
      a[18] * x[1] * x[2] +
      a[19] * x[1] * x[3] +
      a[20] * x[1] * x[4] +
      a[21] * x[1] * x[5]
    ]
  end
  lcon = zeros(T, 3)
  ucon = T[294000, 294000, 277200]
  return ADNLPModels.ADNLPModel(f, x0, lvar, uvar, c, lcon, ucon, name = "hs84"; kwargs...)
end
