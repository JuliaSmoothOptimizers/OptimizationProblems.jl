export mgh17

function mgh17(; use_nls::Bool = false, kwargs...)
  model = use_nls ? :nls : :nlp
  return mgh17(Val(model); kwargs...)
end

function mgh17(
  ::Val{:nlp};
  n::Int = default_nvar,
  type::Val{T} = Val(Float64),
  kwargs...,
) where {T}
y = Rational{Int}[
  8.440000E-01    0.000000E+00
  9.080000E-01    1.000000E+01
  9.320000E-01    2.000000E+01
  9.360000E-01    3.000000E+01
  9.250000E-01    4.000000E+01
  9.080000E-01    5.000000E+01
  8.810000E-01    6.000000E+01
  8.500000E-01    7.000000E+01
  8.180000E-01    8.000000E+01
  7.840000E-01    9.000000E+01
  7.510000E-01    1.000000E+02
  7.180000E-01    1.100000E+02
  6.850000E-01    1.200000E+02
  6.580000E-01    1.300000E+02
  6.280000E-01    1.400000E+02
  6.030000E-01    1.500000E+02
  5.800000E-01    1.600000E+02
  5.580000E-01    1.700000E+02
  5.380000E-01    1.800000E+02
  5.220000E-01    1.900000E+02
  5.060000E-01    2.000000E+02
  4.900000E-01    2.100000E+02
  4.780000E-01    2.200000E+02
  4.670000E-01    2.300000E+02
  4.570000E-01    2.400000E+02
  4.480000E-01    2.500000E+02
  4.380000E-01    2.600000E+02
  4.310000E-01    2.700000E+02
  4.240000E-01    2.800000E+02
  4.200000E-01    2.900000E+02
  4.140000E-01    3.000000E+02
  4.110000E-01    3.100000E+02
  4.060000E-01    3.200000E+02
]
  function f(x; y = y)
    m = 14
    return 1 // 2 * sum((y[i, 1] - (x[1] + x[2]*exp(-y[i, 2]*x[4]) + x[3]*exp(-y[i, 2]*x[5])))^2 for i = 1:14)
  end
  x0 = T[50, 150, -100, 1, 2]
  return ADNLPModels.ADNLPModel(f, x0, name = "mgh17"; kwargs...)
end

function mgh17(
  ::Val{:nls};
  n::Int = default_nvar,
  type::Val{T} = Val(Float64),
  kwargs...,
) where {T}
y = Rational{Int}[
  8.440000E-01    0.000000E+00
  9.080000E-01    1.000000E+01
  9.320000E-01    2.000000E+01
  9.360000E-01    3.000000E+01
  9.250000E-01    4.000000E+01
  9.080000E-01    5.000000E+01
  8.810000E-01    6.000000E+01
  8.500000E-01    7.000000E+01
  8.180000E-01    8.000000E+01
  7.840000E-01    9.000000E+01
  7.510000E-01    1.000000E+02
  7.180000E-01    1.100000E+02
  6.850000E-01    1.200000E+02
  6.580000E-01    1.300000E+02
  6.280000E-01    1.400000E+02
  6.030000E-01    1.500000E+02
  5.800000E-01    1.600000E+02
  5.580000E-01    1.700000E+02
  5.380000E-01    1.800000E+02
  5.220000E-01    1.900000E+02
  5.060000E-01    2.000000E+02
  4.900000E-01    2.100000E+02
  4.780000E-01    2.200000E+02
  4.670000E-01    2.300000E+02
  4.570000E-01    2.400000E+02
  4.480000E-01    2.500000E+02
  4.380000E-01    2.600000E+02
  4.310000E-01    2.700000E+02
  4.240000E-01    2.800000E+02
  4.200000E-01    2.900000E+02
  4.140000E-01    3.000000E+02
  4.110000E-01    3.100000E+02
  4.060000E-01    3.200000E+02
]
  function F!(r, x)
    m = 14
    for i = 1:m
      r[i] = y[i, 1] - (x[1] + x[2]*exp(-y[i, 2]*x[4]) + x[3]*exp(-y[i, 2]*x[5]))
    end
    return r
  end
  x0 = T[50, 150, -100, 1, 2]
  return ADNLPModels.ADNLSModel!(F!, x0, 14, name = "mgh17-nls"; kwargs...)
end
