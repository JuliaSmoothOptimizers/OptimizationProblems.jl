export britgas

_britgas_obj(fi, ri) = fi * (abs(ri)^(22 // 100) - 1)

function britgas(; n::Int = default_nvar, type::Type{T} = Float64, kwargs...) where {T}
  hours = T(8)
  nodes = T(23)
  θ = T(0.75)
  a = T(1.0)
  b = T(1.0)
  α = T(1.8539)
  dt = T(1.0)
  one = T(1.0)
  omega = T(1.0) + (-1.0 * T(0.75))
  s = -1 + (T(8))
  crmax = 10
  k = T(1.0)
  zi = T(1.0)
  ktzi = (T(1.0)) * (T(1.0))
  v = T(1.0)
  vddt = (T(1.0)) * ((T(1.0)) / (T(1.0)))
  h = T(0.01)

  # newly introduced

  γ = T(0.5)

  # q variables are indexed with some pairs from 1:23 × 1:23
  q_ind = [
    (1, 2),
    (1, 17),
    (2, 3),
    (4, 5),
    (5, 6),
    (7, 8),
    (8, 9),
    (8, 10),
    (8, 11),
    (11, 12),
    (12, 13),
    (13, 14),
    (13, 15),
    (15, 16),
    (17, 18),
    (18, 19),
    (20, 21),
    (21, 22),
    (22, 23),
  ]
  q_outneighbors = [i => Int[] for i = 1:23]
  q_inneighbors = [i => Int[] for i = 1:23]
  for (i, j) in q_ind
    push!(q_outneighbors[i], j)
    push!(q_inneighbors[j], i)
  end
  q_neighbors = [vcat(q_inneighbors[i], q_outneighbors[i]) for i in 1:23]

  # f and r variables are indexed with some pairs from 1:23 × 1:23
  fr_ind = [(3, 4), (5, 7), (19, 20)]
  fr_outneighbors = [i => Int[] for i = 1:23]
  fr_inneighbors = [i => Int[] for i = 1:23]
  for (i, j) in fr_ind
    push!(fr_outneighbors[i], j)
    push!(fr_inneighbors[j], i)
  end
  fr_neighbors = [vcat(fr_inneighbors[i], outneighbors[i]) for i in 1:23]

  # in and out variables are indexed with some indices from 1:23
  in_ind = [1]
  out_ind = [16, 23]

  function f(x)
    f_1 = view(x, 379:381)
    r_1 = view(x, 382:384)
    f_2 = view(x, 385:387)
    r_2 = view(x, 388:390)
    f_3 = view(x, 391:393)
    r_3 = view(x, 394:396)
    f_4 = view(x, 397:399)
    r_4 = view(x, 400:402)
    f_5 = view(x, 403:405)
    r_5 = view(x, 406:408)
    f_6 = view(x, 409:411)
    r_6 = view(x, 412:414)
    f_7 = view(x, 415:417)
    r_7 = view(x, 418:420)
    f_8 = view(x, 421:423)
    r_8 = view(x, 424:426)

    f_ = [f_1, f_2, f_3, f_4, f_5, f_6, f_7, f_8]
    r_ = [r_1, r_2, r_3, r_4, r_5, r_6, r_7, r_8]

    o = sum(mapreduce(_britgas_obj, +, f_[t], r_[t]) for t = 1:8)
    return o
  end
  x0 = T[
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
  ]
  function c!(cx, x)
    p_0 = view(x, 1:23)
    p_1 = view(x, 24:46)
    p_2 = view(x, 47:69)
    p_3 = view(x, 70:92)
    p_4 = view(x, 93:115)
    p_5 = view(x, 116:138)
    p_6 = view(x, 139:161)
    p_7 = view(x, 162:184)
    p_8 = view(x, 185:207)

    q_0 = Dict(q_ind .=> view(x, 208:226))
    q_1 = Dict(q_ind .=> view(x, 227:245))
    q_2 = Dict(q_ind .=> view(x, 246:264))
    q_3 = Dict(q_ind .=> view(x, 265:283))
    q_4 = Dict(q_ind .=> view(x, 284:302))
    q_5 = Dict(q_ind .=> view(x, 303:321))
    q_6 = Dict(q_ind .=> view(x, 322:340))
    q_7 = Dict(q_ind .=> view(x, 341:359))
    q_8 = Dict(q_ind .=> view(x, 360:378))

    f_1 = Dict(fr_ind .=> view(x, 379:381))
    r_1 = Dict(fr_ind .=> view(x, 382:384))
    f_2 = Dict(fr_ind .=> view(x, 385:387))
    r_2 = Dict(fr_ind .=> view(x, 388:390))
    f_3 = Dict(fr_ind .=> view(x, 391:393))
    r_3 = Dict(fr_ind .=> view(x, 394:396))
    f_4 = Dict(fr_ind .=> view(x, 397:399))
    r_4 = Dict(fr_ind .=> view(x, 400:402))
    f_5 = Dict(fr_ind .=> view(x, 403:405))
    r_5 = Dict(fr_ind .=> view(x, 406:408))
    f_6 = Dict(fr_ind .=> view(x, 409:411))
    r_6 = Dict(fr_ind .=> view(x, 412:414))
    f_7 = Dict(fr_ind .=> view(x, 415:417))
    r_7 = Dict(fr_ind .=> view(x, 418:420))
    f_8 = Dict(fr_ind .=> view(x, 421:423))
    r_8 = Dict(fr_ind .=> view(x, 424:426))

    in_1 = Dict.(in_ind .=> view(x, 427:427))
    out_1 = Dict(out_ind .=> view(x, 428:429))
    in_2 = Dict.(in_ind .=> view(x, 430:430))
    out_2 = Dict(out_ind .=> view(x, 431:432))
    in_3 = Dict.(in_ind .=> view(x, 433:433))
    out_3 = Dict(out_ind .=> view(x, 434:435))
    in_4 = Dict.(in_ind .=> view(x, 436:436))
    out_4 = Dict(out_ind .=> view(x, 437:438))
    in_5 = Dict.(in_ind .=> view(x, 439:439))
    out_5 = Dict(out_ind .=> view(x, 440:441))
    in_6 = Dict.(in_ind .=> view(x, 442:442))
    out_6 = Dict(out_ind .=> view(x, 443:444))
    in_7 = Dict.(in_ind .=> view(x, 445:445))
    out_7 = Dict(out_ind .=> view(x, 446:447))
    in_8 = Dict.(in_ind .=> view(x, 448:448))
    out_8 = Dict(out_ind .=> view(x, 449:450))

    # multi-step variables
    p_ = [p_1, p_2, p_3, p_4, p_5, p_6, p_7, p_8]
    q_ = [q_1, q_2, q_3, q_4, q_5, q_6, q_7, q_8]
    f_ = [f_1, f_2, f_3, f_4, f_5, f_6, f_7, f_8]
    r_ = [r_1, r_2, r_3, r_4, r_5, r_6, r_7, r_8]
    in_ = [in_1, in_2, in_3, in_4, in_5, in_6, in_7, in_8]
    out_ = [out_1, out_2, out_3, out_4, out_5, out_6, out_7, out_8]

    # time step 1

    cx[1] =
      p_1[1] / (1 + p_1[1]) - p_0[1] / (1 + p_0[1]) - θ * q1_17_1 - θ * q1_2_1 + in_1[1] -
      (1 - θ) * q1_17_0 - (1 - θ) * q1_2_0

    cx[1] =
      p1_1 / (1 + p1_1) - p1_0 / (1 + p1_0) - θ * q1_17_1 - θ * q1_2_1 + in1_1 - (1 - θ) * q1_17_0 -
      (1 - θ) * q1_2_0
    cx[2] =
      p2_1 / (1 + p2_1) - p2_0 / (1 + p2_0) - θ * q2_3_1 + θ * q1_2_1 - (1 - θ) * q2_3_0 +
      (1 - θ) * q1_2_0 - 1
    cx[3] = p3_1 / (1 + p3_1) - p3_0 / (1 + p3_0) - f3_4_1 + θ * q2_3_1 + (1 - θ) * q2_3_0
    cx[4] = p4_1 / (1 + p4_1) - p4_0 / (1 + p4_0) - θ * q4_5_1 + f3_4_1 - (1 - θ) * q4_5_0
    cx[5] =
      p5_1 / (1 + p5_1) - p5_0 / (1 + p5_0) - θ * q5_6_1 - f5_7_1 + θ * q4_5_1 - (1 - θ) * q5_6_0 +
      (1 - θ) * q4_5_0
    cx[6] = p6_1 / (1 + p6_1) - p6_0 / (1 + p6_0) + θ * q5_6_1 + (1 - θ) * q5_6_0 - 1
    cx[7] = p7_1 / (1 + p7_1) - p7_0 / (1 + p7_0) - θ * q7_8_1 + f5_7_1 - (1 - θ) * q7_8_0
    cx[8] =
      p8_1 / (1 + p8_1) - p8_0 / (1 + p8_0) - θ * q8_9_1 - θ * q8_10_1 - θ * q8_11_1 + θ * q7_8_1 -
      (1 - θ) * q8_9_0 - (1 - θ) * q8_10_0 - (1 - θ) * q8_11_0 + (1 - θ) * q7_8_0
    cx[9] = p9_1 / (1 + p9_1) - p9_0 / (1 + p9_0) + θ * q8_9_1 + (1 - θ) * q8_9_0
    cx[10] = p10_1 / (1 + p10_1) - p10_0 / (1 + p10_0) + θ * q8_10_1 + (1 - θ) * q8_10_0 - 1
    cx[11] =
      p11_1 / (1 + p11_1) - p11_0 / (1 + p11_0) - θ * q11_12_1 + θ * q8_11_1 - (1 - θ) * q11_12_0 +
      (1 - θ) * q8_11_0
    cx[12] =
      p12_1 / (1 + p12_1) - p12_0 / (1 + p12_0) - θ * q12_13_1 + θ * q11_12_1 - (1 - θ) * q12_13_0 +
      (1 - θ) * q11_12_0
    cx[13] =
      p13_1 / (1 + p13_1) - p13_0 / (1 + p13_0) - θ * q13_14_1 - θ * q13_15_1 + θ * q12_13_1 -
      (1 - θ) * q13_14_0 - (1 - θ) * q13_15_0 + (1 - θ) * q12_13_0 - 1
    cx[14] = p14_1 / (1 + p14_1) - p14_0 / (1 + p14_0) + θ * q13_14_1 + (1 - θ) * q13_14_0
    cx[15] =
      p15_1 / (1 + p15_1) - p15_0 / (1 + p15_0) - θ * q15_16_1 + θ * q13_15_1 - (1 - θ) * q15_16_0 +
      (1 - θ) * q13_15_0 - 1
    cx[16] = p16_1 / (1 + p16_1) - p16_0 / (1 + p16_0) + θ * q15_16_1 + (1 - θ) * q15_16_0 - out16_1
    cx[17] =
      p17_1 / (1 + p17_1) - p17_0 / (1 + p17_0) - θ * q17_18_1 + θ * q1_17_1 - (1 - θ) * q17_18_0 +
      (1 - θ) * q1_17_0 - 1
    cx[18] =
      p18_1 / (1 + p18_1) - p18_0 / (1 + p18_0) - θ * q18_19_1 + θ * q17_18_1 - (1 - θ) * q18_19_0 +
      (1 - θ) * q17_18_0 - 1
    cx[19] =
      p19_1 / (1 + p19_1) - p19_0 / (1 + p19_0) - f19_20_1 + θ * q18_19_1 + (1 - θ) * q18_19_0
    cx[20] =
      p20_1 / (1 + p20_1) - p20_0 / (1 + p20_0) - θ * q20_21_1 + f19_20_1 - (1 - θ) * q20_21_0
    cx[21] =
      p21_1 / (1 + p21_1) - p21_0 / (1 + p21_0) - θ * q21_22_1 + θ * q20_21_1 - (1 - θ) * q21_22_0 +
      (1 - θ) * q20_21_0 - 1
    cx[22] =
      p22_1 / (1 + p22_1) - p22_0 / (1 + p22_0) - θ * q22_23_1 + θ * q21_22_1 - (1 - θ) * q22_23_0 +
      (1 - θ) * q21_22_0 - 1
    cx[23] = p23_1 / (1 + p23_1) - p23_0 / (1 + p23_0) + θ * q22_23_1 + (1 - θ) * q22_23_0 - out23_1
    cx[24] = p3_1 * r3_4_1 - p4_1
    cx[25] = p5_1 * r5_7_1 - p7_1
    cx[26] = p19_1 * r19_20_1 - p20_1
    cx[27] = p1_1 * p1_1 - p2_1 * p2_1 - h * (1 + γ * (p1_1 + p2_1)) * (abs(q1_2_1)^α)
    cx[28] = p1_1 * p1_1 - p17_1 * p17_1 - h * (1 + γ * (p1_1 + p17_1)) * (abs(q1_17_1)^α)
    cx[29] = p2_1 * p2_1 - p3_1 * p3_1 - h * (1 + γ * (p2_1 + p3_1)) * (abs(q2_3_1)^α)
    cx[30] = p4_1 * p4_1 - p5_1 * p5_1 - h * (1 + γ * (p4_1 + p5_1)) * (abs(q4_5_1)^α)
    cx[31] = p5_1 * p5_1 - p6_1 * p6_1 - h * (1 + γ * (p5_1 + p6_1)) * (abs(q5_6_1)^α)
    cx[32] = p7_1 * p7_1 - p8_1 * p8_1 - h * (1 + γ * (p7_1 + p8_1)) * (abs(q7_8_1)^α)
    cx[33] = p8_1 * p8_1 - p9_1 * p9_1 - h * (1 + γ * (p8_1 + p9_1)) * (abs(q8_9_1)^α)
    cx[34] = p8_1 * p8_1 - p10_1 * p10_1 - h * (1 + γ * (p8_1 + p10_1)) * (abs(q8_10_1)^α)
    cx[35] = p8_1 * p8_1 - p11_1 * p11_1 - h * (1 + γ * (p8_1 + p11_1)) * (abs(q8_11_1)^α)
    cx[36] = p11_1 * p11_1 - p12_1 * p12_1 - h * (1 + γ * (p11_1 + p12_1)) * (abs(q11_12_1)^α)
    cx[37] = p12_1 * p12_1 - p13_1 * p13_1 - h * (1 + γ * (p12_1 + p13_1)) * (abs(q12_13_1)^α)
    cx[38] = p13_1 * p13_1 - p14_1 * p14_1 - h * (1 + γ * (p13_1 + p14_1)) * (abs(q13_14_1)^α)
    cx[39] = p13_1 * p13_1 - p15_1 * p15_1 - h * (1 + γ * (p13_1 + p15_1)) * (abs(q13_15_1)^α)
    cx[40] = p15_1 * p15_1 - p16_1 * p16_1 - h * (1 + γ * (p15_1 + p16_1)) * (abs(q15_16_1)^α)
    cx[41] = p17_1 * p17_1 - p18_1 * p18_1 - h * (1 + γ * (p17_1 + p18_1)) * (abs(q17_18_1)^α)
    cx[42] = p18_1 * p18_1 - p19_1 * p19_1 - h * (1 + γ * (p18_1 + p19_1)) * (abs(q18_19_1)^α)
    cx[43] = p20_1 * p20_1 - p21_1 * p21_1 - h * (1 + γ * (p20_1 + p21_1)) * (abs(q20_21_1)^α)
    cx[44] = p21_1 * p21_1 - p22_1 * p22_1 - h * (1 + γ * (p21_1 + p22_1)) * (abs(q21_22_1)^α)
    cx[45] = p22_1 * p22_1 - p23_1 * p23_1 - h * (1 + γ * (p22_1 + p23_1)) * (abs(q22_23_1)^α)

    # time step 2

    cx[46] =
      p1_2 / (1 + p1_2) - p1_1 / (1 + p1_1) - θ * q1_17_2 - θ * q1_2_2 + in1_2 - (1 - θ) * q1_17_1 -
      (1 - θ) * q1_2_1
    cx[47] =
      p2_2 / (1 + p2_2) - p2_1 / (1 + p2_1) - θ * q2_3_2 + θ * q1_2_2 - (1 - θ) * q2_3_1 +
      (1 - θ) * q1_2_1 - 1
    cx[48] = p3_2 / (1 + p3_2) - p3_1 / (1 + p3_1) - f3_4_2 + θ * q2_3_2 + (1 - θ) * q2_3_1
    cx[49] = p4_2 / (1 + p4_2) - p4_1 / (1 + p4_1) - θ * q4_5_2 + f3_4_2 - (1 - θ) * q4_5_1
    cx[50] =
      p5_2 / (1 + p5_2) - p5_1 / (1 + p5_1) - θ * q5_6_2 - f5_7_2 + θ * q4_5_2 - (1 - θ) * q5_6_1 +
      (1 - θ) * q4_5_1
    cx[51] = p6_2 / (1 + p6_2) - p6_1 / (1 + p6_1) + θ * q5_6_2 + (1 - θ) * q5_6_1 - 1
    cx[52] = p7_2 / (1 + p7_2) - p7_1 / (1 + p7_1) - θ * q7_8_2 + f5_7_2 - (1 - θ) * q7_8_1
    cx[53] =
      p8_2 / (1 + p8_2) - p8_1 / (1 + p8_1) - θ * q8_9_2 - θ * q8_10_2 - θ * q8_11_2 + θ * q7_8_2 -
      (1 - θ) * q8_9_1 - (1 - θ) * q8_10_1 - (1 - θ) * q8_11_1 + (1 - θ) * q7_8_1
    cx[54] = p9_2 / (1 + p9_2) - p9_1 / (1 + p9_1) + θ * q8_9_2 + (1 - θ) * q8_9_1
    cx[55] = p10_2 / (1 + p10_2) - p10_1 / (1 + p10_1) + θ * q8_10_2 + (1 - θ) * q8_10_1 - 1
    cx[56] =
      p11_2 / (1 + p11_2) - p11_1 / (1 + p11_1) - θ * q11_12_2 + θ * q8_11_2 - (1 - θ) * q11_12_1 +
      (1 - θ) * q8_11_1
    cx[57] =
      p12_2 / (1 + p12_2) - p12_1 / (1 + p12_1) - θ * q12_13_2 + θ * q11_12_2 - (1 - θ) * q12_13_1 +
      (1 - θ) * q11_12_1
    cx[58] =
      p13_2 / (1 + p13_2) - p13_1 / (1 + p13_1) - θ * q13_14_2 - θ * q13_15_2 + θ * q12_13_2 -
      (1 - θ) * q13_14_1 - (1 - θ) * q13_15_1 + (1 - θ) * q12_13_1 - 1
    cx[59] = p14_2 / (1 + p14_2) - p14_1 / (1 + p14_1) + θ * q13_14_2 + (1 - θ) * q13_14_1
    cx[60] =
      p15_2 / (1 + p15_2) - p15_1 / (1 + p15_1) - θ * q15_16_2 + θ * q13_15_2 - (1 - θ) * q15_16_1 +
      (1 - θ) * q13_15_1 - 1
    cx[61] = p16_2 / (1 + p16_2) - p16_1 / (1 + p16_1) + θ * q15_16_2 + (1 - θ) * q15_16_1 - out16_2
    cx[62] =
      p17_2 / (1 + p17_2) - p17_1 / (1 + p17_1) - θ * q17_18_2 + θ * q1_17_2 - (1 - θ) * q17_18_1 +
      (1 - θ) * q1_17_1 - 1
    cx[63] =
      p18_2 / (1 + p18_2) - p18_1 / (1 + p18_1) - θ * q18_19_2 + θ * q17_18_2 - (1 - θ) * q18_19_1 +
      (1 - θ) * q17_18_1 - 1
    cx[64] =
      p19_2 / (1 + p19_2) - p19_1 / (1 + p19_1) - f19_20_2 + θ * q18_19_2 + (1 - θ) * q18_19_1
    cx[65] =
      p20_2 / (1 + p20_2) - p20_1 / (1 + p20_1) - θ * q20_21_2 + f19_20_2 - (1 - θ) * q20_21_1
    cx[66] =
      p21_2 / (1 + p21_2) - p21_1 / (1 + p21_1) - θ * q21_22_2 + θ * q20_21_2 - (1 - θ) * q21_22_1 +
      (1 - θ) * q20_21_1 - 1
    cx[67] =
      p22_2 / (1 + p22_2) - p22_1 / (1 + p22_1) - θ * q22_23_2 + θ * q21_22_2 - (1 - θ) * q22_23_1 +
      (1 - θ) * q21_22_1 - 1
    cx[68] = p23_2 / (1 + p23_2) - p23_1 / (1 + p23_1) + θ * q22_23_2 + (1 - θ) * q22_23_1 - out23_2
    cx[69] = p3_2 * r3_4_2 - p4_2
    cx[70] = p5_2 * r5_7_2 - p7_2
    cx[71] = p19_2 * r19_20_2 - p20_2
    cx[72] = p1_2 * p1_2 - p2_2 * p2_2 - h * (1 + γ * (p1_2 + p2_2)) * (abs(q1_2_2)^α)
    cx[73] = p1_2 * p1_2 - p17_2 * p17_2 - h * (1 + γ * (p1_2 + p17_2)) * (abs(q1_17_2)^α)
    cx[74] = p2_2 * p2_2 - p3_2 * p3_2 - h * (1 + γ * (p2_2 + p3_2)) * (abs(q2_3_2)^α)
    cx[75] = p4_2 * p4_2 - p5_2 * p5_2 - h * (1 + γ * (p4_2 + p5_2)) * (abs(q4_5_2)^α)
    cx[76] = p5_2 * p5_2 - p6_2 * p6_2 - h * (1 + γ * (p5_2 + p6_2)) * (abs(q5_6_2)^α)
    cx[77] = p7_2 * p7_2 - p8_2 * p8_2 - h * (1 + γ * (p7_2 + p8_2)) * (abs(q7_8_2)^α)
    cx[78] = p8_2 * p8_2 - p9_2 * p9_2 - h * (1 + γ * (p8_2 + p9_2)) * (abs(q8_9_2)^α)
    cx[79] = p8_2 * p8_2 - p10_2 * p10_2 - h * (1 + γ * (p8_2 + p10_2)) * (abs(q8_10_2)^α)
    cx[80] = p8_2 * p8_2 - p11_2 * p11_2 - h * (1 + γ * (p8_2 + p11_2)) * (abs(q8_11_2)^α)
    cx[81] = p11_2 * p11_2 - p12_2 * p12_2 - h * (1 + γ * (p11_2 + p12_2)) * (abs(q11_12_2)^α)
    cx[82] = p12_2 * p12_2 - p13_2 * p13_2 - h * (1 + γ * (p12_2 + p13_2)) * (abs(q12_13_2)^α)
    cx[83] = p13_2 * p13_2 - p14_2 * p14_2 - h * (1 + γ * (p13_2 + p14_2)) * (abs(q13_14_2)^α)
    cx[84] = p13_2 * p13_2 - p15_2 * p15_2 - h * (1 + γ * (p13_2 + p15_2)) * (abs(q13_15_2)^α)
    cx[85] = p15_2 * p15_2 - p16_2 * p16_2 - h * (1 + γ * (p15_2 + p16_2)) * (abs(q15_16_2)^α)
    cx[86] = p17_2 * p17_2 - p18_2 * p18_2 - h * (1 + γ * (p17_2 + p18_2)) * (abs(q17_18_2)^α)
    cx[87] = p18_2 * p18_2 - p19_2 * p19_2 - h * (1 + γ * (p18_2 + p19_2)) * (abs(q18_19_2)^α)
    cx[88] = p20_2 * p20_2 - p21_2 * p21_2 - h * (1 + γ * (p20_2 + p21_2)) * (abs(q20_21_2)^α)
    cx[89] = p21_2 * p21_2 - p22_2 * p22_2 - h * (1 + γ * (p21_2 + p22_2)) * (abs(q21_22_2)^α)
    cx[90] = p22_2 * p22_2 - p23_2 * p23_2 - h * (1 + γ * (p22_2 + p23_2)) * (abs(q22_23_2)^α)

    # time step 3

    cx[91] =
      p1_3 / (1 + p1_3) - p1_2 / (1 + p1_2) - θ * q1_17_3 - θ * q1_2_3 + in1_3 - (1 - θ) * q1_17_2 -
      (1 - θ) * q1_2_2
    cx[92] =
      p2_3 / (1 + p2_3) - p2_2 / (1 + p2_2) - θ * q2_3_3 + θ * q1_2_3 - (1 - θ) * q2_3_2 +
      (1 - θ) * q1_2_2 - 1
    cx[93] = p3_3 / (1 + p3_3) - p3_2 / (1 + p3_2) - f3_4_3 + θ * q2_3_3 + (1 - θ) * q2_3_2
    cx[94] = p4_3 / (1 + p4_3) - p4_2 / (1 + p4_2) - θ * q4_5_3 + f3_4_3 - (1 - θ) * q4_5_2
    cx[95] =
      p5_3 / (1 + p5_3) - p5_2 / (1 + p5_2) - θ * q5_6_3 - f5_7_3 + θ * q4_5_3 - (1 - θ) * q5_6_2 +
      (1 - θ) * q4_5_2
    cx[96] = p6_3 / (1 + p6_3) - p6_2 / (1 + p6_2) + θ * q5_6_3 + (1 - θ) * q5_6_2 - 1
    cx[97] = p7_3 / (1 + p7_3) - p7_2 / (1 + p7_2) - θ * q7_8_3 + f5_7_3 - (1 - θ) * q7_8_2
    cx[98] =
      p8_3 / (1 + p8_3) - p8_2 / (1 + p8_2) - θ * q8_9_3 - θ * q8_10_3 - θ * q8_11_3 + θ * q7_8_3 -
      (1 - θ) * q8_9_2 - (1 - θ) * q8_10_2 - (1 - θ) * q8_11_2 + (1 - θ) * q7_8_2
    cx[99] = p9_3 / (1 + p9_3) - p9_2 / (1 + p9_2) + θ * q8_9_3 + (1 - θ) * q8_9_2
    cx[100] = p10_3 / (1 + p10_3) - p10_2 / (1 + p10_2) + θ * q8_10_3 + (1 - θ) * q8_10_2 - 1
    cx[101] =
      p11_3 / (1 + p11_3) - p11_2 / (1 + p11_2) - θ * q11_12_3 + θ * q8_11_3 - (1 - θ) * q11_12_2 +
      (1 - θ) * q8_11_2
    cx[102] =
      p12_3 / (1 + p12_3) - p12_2 / (1 + p12_2) - θ * q12_13_3 + θ * q11_12_3 - (1 - θ) * q12_13_2 +
      (1 - θ) * q11_12_2
    cx[103] =
      p13_3 / (1 + p13_3) - p13_2 / (1 + p13_2) - θ * q13_14_3 - θ * q13_15_3 + θ * q12_13_3 -
      (1 - θ) * q13_14_2 - (1 - θ) * q13_15_2 + (1 - θ) * q12_13_2 - 1
    cx[104] = p14_3 / (1 + p14_3) - p14_2 / (1 + p14_2) + θ * q13_14_3 + (1 - θ) * q13_14_2
    cx[105] =
      p15_3 / (1 + p15_3) - p15_2 / (1 + p15_2) - θ * q15_16_3 + θ * q13_15_3 - (1 - θ) * q15_16_2 +
      (1 - θ) * q13_15_2 - 1
    cx[106] =
      p16_3 / (1 + p16_3) - p16_2 / (1 + p16_2) + θ * q15_16_3 + (1 - θ) * q15_16_2 - out16_3
    cx[107] =
      p17_3 / (1 + p17_3) - p17_2 / (1 + p17_2) - θ * q17_18_3 + θ * q1_17_3 - (1 - θ) * q17_18_2 +
      (1 - θ) * q1_17_2 - 1
    cx[108] =
      p18_3 / (1 + p18_3) - p18_2 / (1 + p18_2) - θ * q18_19_3 + θ * q17_18_3 - (1 - θ) * q18_19_2 +
      (1 - θ) * q17_18_2 - 1
    cx[109] =
      p19_3 / (1 + p19_3) - p19_2 / (1 + p19_2) - f19_20_3 + θ * q18_19_3 + (1 - θ) * q18_19_2
    cx[110] =
      p20_3 / (1 + p20_3) - p20_2 / (1 + p20_2) - θ * q20_21_3 + f19_20_3 - (1 - θ) * q20_21_2
    cx[111] =
      p21_3 / (1 + p21_3) - p21_2 / (1 + p21_2) - θ * q21_22_3 + θ * q20_21_3 - (1 - θ) * q21_22_2 +
      (1 - θ) * q20_21_2 - 1
    cx[112] =
      p22_3 / (1 + p22_3) - p22_2 / (1 + p22_2) - θ * q22_23_3 + θ * q21_22_3 - (1 - θ) * q22_23_2 +
      (1 - θ) * q21_22_2 - 1
    cx[113] =
      p23_3 / (1 + p23_3) - p23_2 / (1 + p23_2) + θ * q22_23_3 + (1 - θ) * q22_23_2 - out23_3
    cx[114] = p3_3 * r3_4_3 - p4_3
    cx[115] = p5_3 * r5_7_3 - p7_3
    cx[116] = p19_3 * r19_20_3 - p20_3
    cx[117] = p1_3 * p1_3 - p2_3 * p2_3 - h * (1 + γ * (p1_3 + p2_3)) * (abs(q1_2_3)^α)
    cx[118] = p1_3 * p1_3 - p17_3 * p17_3 - h * (1 + γ * (p1_3 + p17_3)) * (abs(q1_17_3)^α)
    cx[119] = p2_3 * p2_3 - p3_3 * p3_3 - h * (1 + γ * (p2_3 + p3_3)) * (abs(q2_3_3)^α)
    cx[120] = p4_3 * p4_3 - p5_3 * p5_3 - h * (1 + γ * (p4_3 + p5_3)) * (abs(q4_5_3)^α)
    cx[121] = p5_3 * p5_3 - p6_3 * p6_3 - h * (1 + γ * (p5_3 + p6_3)) * (abs(q5_6_3)^α)
    cx[122] = p7_3 * p7_3 - p8_3 * p8_3 - h * (1 + γ * (p7_3 + p8_3)) * (abs(q7_8_3)^α)
    cx[123] = p8_3 * p8_3 - p9_3 * p9_3 - h * (1 + γ * (p8_3 + p9_3)) * (abs(q8_9_3)^α)
    cx[124] = p8_3 * p8_3 - p10_3 * p10_3 - h * (1 + γ * (p8_3 + p10_3)) * (abs(q8_10_3)^α)
    cx[125] = p8_3 * p8_3 - p11_3 * p11_3 - h * (1 + γ * (p8_3 + p11_3)) * (abs(q8_11_3)^α)
    cx[126] = p11_3 * p11_3 - p12_3 * p12_3 - h * (1 + γ * (p11_3 + p12_3)) * (abs(q11_12_3)^α)
    cx[127] = p12_3 * p12_3 - p13_3 * p13_3 - h * (1 + γ * (p12_3 + p13_3)) * (abs(q12_13_3)^α)
    cx[128] = p13_3 * p13_3 - p14_3 * p14_3 - h * (1 + γ * (p13_3 + p14_3)) * (abs(q13_14_3)^α)
    cx[129] = p13_3 * p13_3 - p15_3 * p15_3 - h * (1 + γ * (p13_3 + p15_3)) * (abs(q13_15_3)^α)
    cx[130] = p15_3 * p15_3 - p16_3 * p16_3 - h * (1 + γ * (p15_3 + p16_3)) * (abs(q15_16_3)^α)
    cx[131] = p17_3 * p17_3 - p18_3 * p18_3 - h * (1 + γ * (p17_3 + p18_3)) * (abs(q17_18_3)^α)
    cx[132] = p18_3 * p18_3 - p19_3 * p19_3 - h * (1 + γ * (p18_3 + p19_3)) * (abs(q18_19_3)^α)
    cx[133] = p20_3 * p20_3 - p21_3 * p21_3 - h * (1 + γ * (p20_3 + p21_3)) * (abs(q20_21_3)^α)
    cx[134] = p21_3 * p21_3 - p22_3 * p22_3 - h * (1 + γ * (p21_3 + p22_3)) * (abs(q21_22_3)^α)
    cx[135] = p22_3 * p22_3 - p23_3 * p23_3 - h * (1 + γ * (p22_3 + p23_3)) * (abs(q22_23_3)^α)

    # time step 4

    cx[136] =
      p1_4 / (1 + p1_4) - p1_3 / (1 + p1_3) - θ * q1_17_4 - θ * q1_2_4 + in1_4 - (1 - θ) * q1_17_3 -
      (1 - θ) * q1_2_3
    cx[137] =
      p2_4 / (1 + p2_4) - p2_3 / (1 + p2_3) - θ * q2_3_4 + θ * q1_2_4 - (1 - θ) * q2_3_3 +
      (1 - θ) * q1_2_3 - 1
    cx[138] = p3_4 / (1 + p3_4) - p3_3 / (1 + p3_3) - f3_4_4 + θ * q2_3_4 + (1 - θ) * q2_3_3
    cx[139] = p4_4 / (1 + p4_4) - p4_3 / (1 + p4_3) - θ * q4_5_4 + f3_4_4 - (1 - θ) * q4_5_3
    cx[140] =
      p5_4 / (1 + p5_4) - p5_3 / (1 + p5_3) - θ * q5_6_4 - f5_7_4 + θ * q4_5_4 - (1 - θ) * q5_6_3 +
      (1 - θ) * q4_5_3
    cx[141] = p6_4 / (1 + p6_4) - p6_3 / (1 + p6_3) + θ * q5_6_4 + (1 - θ) * q5_6_3 - 1
    cx[142] = p7_4 / (1 + p7_4) - p7_3 / (1 + p7_3) - θ * q7_8_4 + f5_7_4 - (1 - θ) * q7_8_3
    cx[143] =
      p8_4 / (1 + p8_4) - p8_3 / (1 + p8_3) - θ * q8_9_4 - θ * q8_10_4 - θ * q8_11_4 + θ * q7_8_4 -
      (1 - θ) * q8_9_3 - (1 - θ) * q8_10_3 - (1 - θ) * q8_11_3 + (1 - θ) * q7_8_3
    cx[144] = p9_4 / (1 + p9_4) - p9_3 / (1 + p9_3) + θ * q8_9_4 + (1 - θ) * q8_9_3
    cx[145] = p10_4 / (1 + p10_4) - p10_3 / (1 + p10_3) + θ * q8_10_4 + (1 - θ) * q8_10_3 - 1
    cx[146] =
      p11_4 / (1 + p11_4) - p11_3 / (1 + p11_3) - θ * q11_12_4 + θ * q8_11_4 - (1 - θ) * q11_12_3 +
      (1 - θ) * q8_11_3
    cx[147] =
      p12_4 / (1 + p12_4) - p12_3 / (1 + p12_3) - θ * q12_13_4 + θ * q11_12_4 - (1 - θ) * q12_13_3 +
      (1 - θ) * q11_12_3
    cx[148] =
      p13_4 / (1 + p13_4) - p13_3 / (1 + p13_3) - θ * q13_14_4 - θ * q13_15_4 + θ * q12_13_4 -
      (1 - θ) * q13_14_3 - (1 - θ) * q13_15_3 + (1 - θ) * q12_13_3 - 1
    cx[149] = p14_4 / (1 + p14_4) - p14_3 / (1 + p14_3) + θ * q13_14_4 + (1 - θ) * q13_14_3
    cx[150] =
      p15_4 / (1 + p15_4) - p15_3 / (1 + p15_3) - θ * q15_16_4 + θ * q13_15_4 - (1 - θ) * q15_16_3 +
      (1 - θ) * q13_15_3 - 1
    cx[151] =
      p16_4 / (1 + p16_4) - p16_3 / (1 + p16_3) + θ * q15_16_4 + (1 - θ) * q15_16_3 - out16_4
    cx[152] =
      p17_4 / (1 + p17_4) - p17_3 / (1 + p17_3) - θ * q17_18_4 + θ * q1_17_4 - (1 - θ) * q17_18_3 +
      (1 - θ) * q1_17_3 - 1
    cx[153] =
      p18_4 / (1 + p18_4) - p18_3 / (1 + p18_3) - θ * q18_19_4 + θ * q17_18_4 - (1 - θ) * q18_19_3 +
      (1 - θ) * q17_18_3 - 1
    cx[154] =
      p19_4 / (1 + p19_4) - p19_3 / (1 + p19_3) - f19_20_4 + θ * q18_19_4 + (1 - θ) * q18_19_3
    cx[155] =
      p20_4 / (1 + p20_4) - p20_3 / (1 + p20_3) - θ * q20_21_4 + f19_20_4 - (1 - θ) * q20_21_3
    cx[156] =
      p21_4 / (1 + p21_4) - p21_3 / (1 + p21_3) - θ * q21_22_4 + θ * q20_21_4 - (1 - θ) * q21_22_3 +
      (1 - θ) * q20_21_3 - 1
    cx[157] =
      p22_4 / (1 + p22_4) - p22_3 / (1 + p22_3) - θ * q22_23_4 + θ * q21_22_4 - (1 - θ) * q22_23_3 +
      (1 - θ) * q21_22_3 - 1
    cx[158] =
      p23_4 / (1 + p23_4) - p23_3 / (1 + p23_3) + θ * q22_23_4 + (1 - θ) * q22_23_3 - out23_4
    cx[159] = p3_4 * r3_4_4 - p4_4
    cx[160] = p5_4 * r5_7_4 - p7_4
    cx[161] = p19_4 * r19_20_4 - p20_4
    cx[162] = p1_4 * p1_4 - p2_4 * p2_4 - h * (1 + γ * (p1_4 + p2_4)) * (abs(q1_2_4)^α)
    cx[163] = p1_4 * p1_4 - p17_4 * p17_4 - h * (1 + γ * (p1_4 + p17_4)) * (abs(q1_17_4)^α)
    cx[164] = p2_4 * p2_4 - p3_4 * p3_4 - h * (1 + γ * (p2_4 + p3_4)) * (abs(q2_3_4)^α)
    cx[165] = p4_4 * p4_4 - p5_4 * p5_4 - h * (1 + γ * (p4_4 + p5_4)) * (abs(q4_5_4)^α)
    cx[166] = p5_4 * p5_4 - p6_4 * p6_4 - h * (1 + γ * (p5_4 + p6_4)) * (abs(q5_6_4)^α)
    cx[167] = p7_4 * p7_4 - p8_4 * p8_4 - h * (1 + γ * (p7_4 + p8_4)) * (abs(q7_8_4)^α)
    cx[168] = p8_4 * p8_4 - p9_4 * p9_4 - h * (1 + γ * (p8_4 + p9_4)) * (abs(q8_9_4)^α)
    cx[169] = p8_4 * p8_4 - p10_4 * p10_4 - h * (1 + γ * (p8_4 + p10_4)) * (abs(q8_10_4)^α)
    cx[170] = p8_4 * p8_4 - p11_4 * p11_4 - h * (1 + γ * (p8_4 + p11_4)) * (abs(q8_11_4)^α)
    cx[171] = p11_4 * p11_4 - p12_4 * p12_4 - h * (1 + γ * (p11_4 + p12_4)) * (abs(q11_12_4)^α)
    cx[172] = p12_4 * p12_4 - p13_4 * p13_4 - h * (1 + γ * (p12_4 + p13_4)) * (abs(q12_13_4)^α)
    cx[173] = p13_4 * p13_4 - p14_4 * p14_4 - h * (1 + γ * (p13_4 + p14_4)) * (abs(q13_14_4)^α)
    cx[174] = p13_4 * p13_4 - p15_4 * p15_4 - h * (1 + γ * (p13_4 + p15_4)) * (abs(q13_15_4)^α)
    cx[175] = p15_4 * p15_4 - p16_4 * p16_4 - h * (1 + γ * (p15_4 + p16_4)) * (abs(q15_16_4)^α)
    cx[176] = p17_4 * p17_4 - p18_4 * p18_4 - h * (1 + γ * (p17_4 + p18_4)) * (abs(q17_18_4)^α)
    cx[177] = p18_4 * p18_4 - p19_4 * p19_4 - h * (1 + γ * (p18_4 + p19_4)) * (abs(q18_19_4)^α)
    cx[178] = p20_4 * p20_4 - p21_4 * p21_4 - h * (1 + γ * (p20_4 + p21_4)) * (abs(q20_21_4)^α)
    cx[179] = p21_4 * p21_4 - p22_4 * p22_4 - h * (1 + γ * (p21_4 + p22_4)) * (abs(q21_22_4)^α)
    cx[180] = p22_4 * p22_4 - p23_4 * p23_4 - h * (1 + γ * (p22_4 + p23_4)) * (abs(q22_23_4)^α)

    # time step 5

    cx[181] =
      p1_5 / (1 + p1_5) - p1_4 / (1 + p1_4) - θ * q1_17_5 - θ * q1_2_5 + in1_5 - (1 - θ) * q1_17_4 -
      (1 - θ) * q1_2_4
    cx[182] =
      p2_5 / (1 + p2_5) - p2_4 / (1 + p2_4) - θ * q2_3_5 + θ * q1_2_5 - (1 - θ) * q2_3_4 +
      (1 - θ) * q1_2_4 - 1
    cx[183] = p3_5 / (1 + p3_5) - p3_4 / (1 + p3_4) - f3_4_5 + θ * q2_3_5 + (1 - θ) * q2_3_4
    cx[184] = p4_5 / (1 + p4_5) - p4_4 / (1 + p4_4) - θ * q4_5_5 + f3_4_5 - (1 - θ) * q4_5_4
    cx[185] =
      p5_5 / (1 + p5_5) - p5_4 / (1 + p5_4) - θ * q5_6_5 - f5_7_5 + θ * q4_5_5 - (1 - θ) * q5_6_4 +
      (1 - θ) * q4_5_4
    cx[186] = p6_5 / (1 + p6_5) - p6_4 / (1 + p6_4) + θ * q5_6_5 + (1 - θ) * q5_6_4 - 1
    cx[187] = p7_5 / (1 + p7_5) - p7_4 / (1 + p7_4) - θ * q7_8_5 + f5_7_5 - (1 - θ) * q7_8_4
    cx[188] =
      p8_5 / (1 + p8_5) - p8_4 / (1 + p8_4) - θ * q8_9_5 - θ * q8_10_5 - θ * q8_11_5 + θ * q7_8_5 -
      (1 - θ) * q8_9_4 - (1 - θ) * q8_10_4 - (1 - θ) * q8_11_4 + (1 - θ) * q7_8_4
    cx[189] = p9_5 / (1 + p9_5) - p9_4 / (1 + p9_4) + θ * q8_9_5 + (1 - θ) * q8_9_4
    cx[190] = p10_5 / (1 + p10_5) - p10_4 / (1 + p10_4) + θ * q8_10_5 + (1 - θ) * q8_10_4 - 1
    cx[191] =
      p11_5 / (1 + p11_5) - p11_4 / (1 + p11_4) - θ * q11_12_5 + θ * q8_11_5 - (1 - θ) * q11_12_4 +
      (1 - θ) * q8_11_4
    cx[192] =
      p12_5 / (1 + p12_5) - p12_4 / (1 + p12_4) - θ * q12_13_5 + θ * q11_12_5 - (1 - θ) * q12_13_4 +
      (1 - θ) * q11_12_4
    cx[193] =
      p13_5 / (1 + p13_5) - p13_4 / (1 + p13_4) - θ * q13_14_5 - θ * q13_15_5 + θ * q12_13_5 -
      (1 - θ) * q13_14_4 - (1 - θ) * q13_15_4 + (1 - θ) * q12_13_4 - 1
    cx[194] = p14_5 / (1 + p14_5) - p14_4 / (1 + p14_4) + θ * q13_14_5 + (1 - θ) * q13_14_4
    cx[195] =
      p15_5 / (1 + p15_5) - p15_4 / (1 + p15_4) - θ * q15_16_5 + θ * q13_15_5 - (1 - θ) * q15_16_4 +
      (1 - θ) * q13_15_4 - 1
    cx[196] =
      p16_5 / (1 + p16_5) - p16_4 / (1 + p16_4) + θ * q15_16_5 + (1 - θ) * q15_16_4 - out16_5
    cx[197] =
      p17_5 / (1 + p17_5) - p17_4 / (1 + p17_4) - θ * q17_18_5 + θ * q1_17_5 - (1 - θ) * q17_18_4 +
      (1 - θ) * q1_17_4 - 1
    cx[198] =
      p18_5 / (1 + p18_5) - p18_4 / (1 + p18_4) - θ * q18_19_5 + θ * q17_18_5 - (1 - θ) * q18_19_4 +
      (1 - θ) * q17_18_4 - 1
    cx[199] =
      p19_5 / (1 + p19_5) - p19_4 / (1 + p19_4) - f19_20_5 + θ * q18_19_5 + (1 - θ) * q18_19_4
    cx[200] =
      p20_5 / (1 + p20_5) - p20_4 / (1 + p20_4) - θ * q20_21_5 + f19_20_5 - (1 - θ) * q20_21_4
    cx[201] =
      p21_5 / (1 + p21_5) - p21_4 / (1 + p21_4) - θ * q21_22_5 + θ * q20_21_5 - (1 - θ) * q21_22_4 +
      (1 - θ) * q20_21_4 - 1
    cx[202] =
      p22_5 / (1 + p22_5) - p22_4 / (1 + p22_4) - θ * q22_23_5 + θ * q21_22_5 - (1 - θ) * q22_23_4 +
      (1 - θ) * q21_22_4 - 1
    cx[203] =
      p23_5 / (1 + p23_5) - p23_4 / (1 + p23_4) + θ * q22_23_5 + (1 - θ) * q22_23_4 - out23_5
    cx[204] = p3_5 * r3_4_5 - p4_5
    cx[205] = p5_5 * r5_7_5 - p7_5
    cx[206] = p19_5 * r19_20_5 - p20_5
    cx[207] = p1_5 * p1_5 - p2_5 * p2_5 - h * (1 + γ * (p1_5 + p2_5)) * (abs(q1_2_5)^α)
    cx[208] = p1_5 * p1_5 - p17_5 * p17_5 - h * (1 + γ * (p1_5 + p17_5)) * (abs(q1_17_5)^α)
    cx[209] = p2_5 * p2_5 - p3_5 * p3_5 - h * (1 + γ * (p2_5 + p3_5)) * (abs(q2_3_5)^α)
    cx[210] = p4_5 * p4_5 - p5_5 * p5_5 - h * (1 + γ * (p4_5 + p5_5)) * (abs(q4_5_5)^α)
    cx[211] = p5_5 * p5_5 - p6_5 * p6_5 - h * (1 + γ * (p5_5 + p6_5)) * (abs(q5_6_5)^α)
    cx[212] = p7_5 * p7_5 - p8_5 * p8_5 - h * (1 + γ * (p7_5 + p8_5)) * (abs(q7_8_5)^α)
    cx[213] = p8_5 * p8_5 - p9_5 * p9_5 - h * (1 + γ * (p8_5 + p9_5)) * (abs(q8_9_5)^α)
    cx[214] = p8_5 * p8_5 - p10_5 * p10_5 - h * (1 + γ * (p8_5 + p10_5)) * (abs(q8_10_5)^α)
    cx[215] = p8_5 * p8_5 - p11_5 * p11_5 - h * (1 + γ * (p8_5 + p11_5)) * (abs(q8_11_5)^α)
    cx[216] = p11_5 * p11_5 - p12_5 * p12_5 - h * (1 + γ * (p11_5 + p12_5)) * (abs(q11_12_5)^α)
    cx[217] = p12_5 * p12_5 - p13_5 * p13_5 - h * (1 + γ * (p12_5 + p13_5)) * (abs(q12_13_5)^α)
    cx[218] = p13_5 * p13_5 - p14_5 * p14_5 - h * (1 + γ * (p13_5 + p14_5)) * (abs(q13_14_5)^α)
    cx[219] = p13_5 * p13_5 - p15_5 * p15_5 - h * (1 + γ * (p13_5 + p15_5)) * (abs(q13_15_5)^α)
    cx[220] = p15_5 * p15_5 - p16_5 * p16_5 - h * (1 + γ * (p15_5 + p16_5)) * (abs(q15_16_5)^α)
    cx[221] = p17_5 * p17_5 - p18_5 * p18_5 - h * (1 + γ * (p17_5 + p18_5)) * (abs(q17_18_5)^α)
    cx[222] = p18_5 * p18_5 - p19_5 * p19_5 - h * (1 + γ * (p18_5 + p19_5)) * (abs(q18_19_5)^α)
    cx[223] = p20_5 * p20_5 - p21_5 * p21_5 - h * (1 + γ * (p20_5 + p21_5)) * (abs(q20_21_5)^α)
    cx[224] = p21_5 * p21_5 - p22_5 * p22_5 - h * (1 + γ * (p21_5 + p22_5)) * (abs(q21_22_5)^α)
    cx[225] = p22_5 * p22_5 - p23_5 * p23_5 - h * (1 + γ * (p22_5 + p23_5)) * (abs(q22_23_5)^α)

    # time step 6

    cx[226] =
      p1_6 / (1 + p1_6) - p1_5 / (1 + p1_5) - θ * q1_17_6 - θ * q1_2_6 + in1_6 - (1 - θ) * q1_17_5 -
      (1 - θ) * q1_2_5
    cx[227] =
      p2_6 / (1 + p2_6) - p2_5 / (1 + p2_5) - θ * q2_3_6 + θ * q1_2_6 - (1 - θ) * q2_3_5 +
      (1 - θ) * q1_2_5 - 1
    cx[228] = p3_6 / (1 + p3_6) - p3_5 / (1 + p3_5) - f3_4_6 + θ * q2_3_6 + (1 - θ) * q2_3_5
    cx[229] = p4_6 / (1 + p4_6) - p4_5 / (1 + p4_5) - θ * q4_5_6 + f3_4_6 - (1 - θ) * q4_5_5
    cx[230] =
      p5_6 / (1 + p5_6) - p5_5 / (1 + p5_5) - θ * q5_6_6 - f5_7_6 + θ * q4_5_6 - (1 - θ) * q5_6_5 +
      (1 - θ) * q4_5_5
    cx[231] = p6_6 / (1 + p6_6) - p6_5 / (1 + p6_5) + θ * q5_6_6 + (1 - θ) * q5_6_5 - 1
    cx[232] = p7_6 / (1 + p7_6) - p7_5 / (1 + p7_5) - θ * q7_8_6 + f5_7_6 - (1 - θ) * q7_8_5
    cx[233] =
      p8_6 / (1 + p8_6) - p8_5 / (1 + p8_5) - θ * q8_9_6 - θ * q8_10_6 - θ * q8_11_6 + θ * q7_8_6 -
      (1 - θ) * q8_9_5 - (1 - θ) * q8_10_5 - (1 - θ) * q8_11_5 + (1 - θ) * q7_8_5
    cx[234] = p9_6 / (1 + p9_6) - p9_5 / (1 + p9_5) + θ * q8_9_6 + (1 - θ) * q8_9_5
    cx[235] = p10_6 / (1 + p10_6) - p10_5 / (1 + p10_5) + θ * q8_10_6 + (1 - θ) * q8_10_5 - 1
    cx[236] =
      p11_6 / (1 + p11_6) - p11_5 / (1 + p11_5) - θ * q11_12_6 + θ * q8_11_6 - (1 - θ) * q11_12_5 +
      (1 - θ) * q8_11_5
    cx[237] =
      p12_6 / (1 + p12_6) - p12_5 / (1 + p12_5) - θ * q12_13_6 + θ * q11_12_6 - (1 - θ) * q12_13_5 +
      (1 - θ) * q11_12_5
    cx[238] =
      p13_6 / (1 + p13_6) - p13_5 / (1 + p13_5) - θ * q13_14_6 - θ * q13_15_6 + θ * q12_13_6 -
      (1 - θ) * q13_14_5 - (1 - θ) * q13_15_5 + (1 - θ) * q12_13_5 - 1
    cx[239] = p14_6 / (1 + p14_6) - p14_5 / (1 + p14_5) + θ * q13_14_6 + (1 - θ) * q13_14_5
    cx[240] =
      p15_6 / (1 + p15_6) - p15_5 / (1 + p15_5) - θ * q15_16_6 + θ * q13_15_6 - (1 - θ) * q15_16_5 +
      (1 - θ) * q13_15_5 - 1
    cx[241] =
      p16_6 / (1 + p16_6) - p16_5 / (1 + p16_5) + θ * q15_16_6 + (1 - θ) * q15_16_5 - out16_6
    cx[242] =
      p17_6 / (1 + p17_6) - p17_5 / (1 + p17_5) - θ * q17_18_6 + θ * q1_17_6 - (1 - θ) * q17_18_5 +
      (1 - θ) * q1_17_5 - 1
    cx[243] =
      p18_6 / (1 + p18_6) - p18_5 / (1 + p18_5) - θ * q18_19_6 + θ * q17_18_6 - (1 - θ) * q18_19_5 +
      (1 - θ) * q17_18_5 - 1
    cx[244] =
      p19_6 / (1 + p19_6) - p19_5 / (1 + p19_5) - f19_20_6 + θ * q18_19_6 + (1 - θ) * q18_19_5
    cx[245] =
      p20_6 / (1 + p20_6) - p20_5 / (1 + p20_5) - θ * q20_21_6 + f19_20_6 - (1 - θ) * q20_21_5
    cx[246] =
      p21_6 / (1 + p21_6) - p21_5 / (1 + p21_5) - θ * q21_22_6 + θ * q20_21_6 - (1 - θ) * q21_22_5 +
      (1 - θ) * q20_21_5 - 1
    cx[247] =
      p22_6 / (1 + p22_6) - p22_5 / (1 + p22_5) - θ * q22_23_6 + θ * q21_22_6 - (1 - θ) * q22_23_5 +
      (1 - θ) * q21_22_5 - 1
    cx[248] =
      p23_6 / (1 + p23_6) - p23_5 / (1 + p23_5) + θ * q22_23_6 + (1 - θ) * q22_23_5 - out23_6
    cx[249] = p3_6 * r3_4_6 - p4_6
    cx[250] = p5_6 * r5_7_6 - p7_6
    cx[251] = p19_6 * r19_20_6 - p20_6
    cx[252] = p1_6 * p1_6 - p2_6 * p2_6 - h * (1 + γ * (p1_6 + p2_6)) * (abs(q1_2_6)^α)
    cx[253] = p1_6 * p1_6 - p17_6 * p17_6 - h * (1 + γ * (p1_6 + p17_6)) * (abs(q1_17_6)^α)
    cx[254] = p2_6 * p2_6 - p3_6 * p3_6 - h * (1 + γ * (p2_6 + p3_6)) * (abs(q2_3_6)^α)
    cx[255] = p4_6 * p4_6 - p5_6 * p5_6 - h * (1 + γ * (p4_6 + p5_6)) * (abs(q4_5_6)^α)
    cx[256] = p5_6 * p5_6 - p6_6 * p6_6 - h * (1 + γ * (p5_6 + p6_6)) * (abs(q5_6_6)^α)
    cx[257] = p7_6 * p7_6 - p8_6 * p8_6 - h * (1 + γ * (p7_6 + p8_6)) * (abs(q7_8_6)^α)
    cx[258] = p8_6 * p8_6 - p9_6 * p9_6 - h * (1 + γ * (p8_6 + p9_6)) * (abs(q8_9_6)^α)
    cx[259] = p8_6 * p8_6 - p10_6 * p10_6 - h * (1 + γ * (p8_6 + p10_6)) * (abs(q8_10_6)^α)
    cx[260] = p8_6 * p8_6 - p11_6 * p11_6 - h * (1 + γ * (p8_6 + p11_6)) * (abs(q8_11_6)^α)
    cx[261] = p11_6 * p11_6 - p12_6 * p12_6 - h * (1 + γ * (p11_6 + p12_6)) * (abs(q11_12_6)^α)
    cx[262] = p12_6 * p12_6 - p13_6 * p13_6 - h * (1 + γ * (p12_6 + p13_6)) * (abs(q12_13_6)^α)
    cx[263] = p13_6 * p13_6 - p14_6 * p14_6 - h * (1 + γ * (p13_6 + p14_6)) * (abs(q13_14_6)^α)
    cx[264] = p13_6 * p13_6 - p15_6 * p15_6 - h * (1 + γ * (p13_6 + p15_6)) * (abs(q13_15_6)^α)
    cx[265] = p15_6 * p15_6 - p16_6 * p16_6 - h * (1 + γ * (p15_6 + p16_6)) * (abs(q15_16_6)^α)
    cx[266] = p17_6 * p17_6 - p18_6 * p18_6 - h * (1 + γ * (p17_6 + p18_6)) * (abs(q17_18_6)^α)
    cx[267] = p18_6 * p18_6 - p19_6 * p19_6 - h * (1 + γ * (p18_6 + p19_6)) * (abs(q18_19_6)^α)
    cx[268] = p20_6 * p20_6 - p21_6 * p21_6 - h * (1 + γ * (p20_6 + p21_6)) * (abs(q20_21_6)^α)
    cx[269] = p21_6 * p21_6 - p22_6 * p22_6 - h * (1 + γ * (p21_6 + p22_6)) * (abs(q21_22_6)^α)
    cx[270] = p22_6 * p22_6 - p23_6 * p23_6 - h * (1 + γ * (p22_6 + p23_6)) * (abs(q22_23_6)^α)

    # time step 7

    cx[271] =
      p1_7 / (1 + p1_7) - p1_6 / (1 + p1_6) - θ * q1_17_7 - θ * q1_2_7 + in1_7 - (1 - θ) * q1_17_6 -
      (1 - θ) * q1_2_6
    cx[272] =
      p2_7 / (1 + p2_7) - p2_6 / (1 + p2_6) - θ * q2_3_7 + θ * q1_2_7 - (1 - θ) * q2_3_6 +
      (1 - θ) * q1_2_6 - 1
    cx[273] = p3_7 / (1 + p3_7) - p3_6 / (1 + p3_6) - f3_4_7 + θ * q2_3_7 + (1 - θ) * q2_3_6
    cx[274] = p4_7 / (1 + p4_7) - p4_6 / (1 + p4_6) - θ * q4_5_7 + f3_4_7 - (1 - θ) * q4_5_6
    cx[275] =
      p5_7 / (1 + p5_7) - p5_6 / (1 + p5_6) - θ * q5_6_7 - f5_7_7 + θ * q4_5_7 - (1 - θ) * q5_6_6 +
      (1 - θ) * q4_5_6
    cx[276] = p6_7 / (1 + p6_7) - p6_6 / (1 + p6_6) + θ * q5_6_7 + (1 - θ) * q5_6_6 - 1
    cx[277] = p7_7 / (1 + p7_7) - p7_6 / (1 + p7_6) - θ * q7_8_7 + f5_7_7 - (1 - θ) * q7_8_6
    cx[278] =
      p8_7 / (1 + p8_7) - p8_6 / (1 + p8_6) - θ * q8_9_7 - θ * q8_10_7 - θ * q8_11_7 + θ * q7_8_7 -
      (1 - θ) * q8_9_6 - (1 - θ) * q8_10_6 - (1 - θ) * q8_11_6 + (1 - θ) * q7_8_6
    cx[279] = p9_7 / (1 + p9_7) - p9_6 / (1 + p9_6) + θ * q8_9_7 + (1 - θ) * q8_9_6
    cx[280] = p10_7 / (1 + p10_7) - p10_6 / (1 + p10_6) + θ * q8_10_7 + (1 - θ) * q8_10_6 - 1
    cx[281] =
      p11_7 / (1 + p11_7) - p11_6 / (1 + p11_6) - θ * q11_12_7 + θ * q8_11_7 - (1 - θ) * q11_12_6 +
      (1 - θ) * q8_11_6
    cx[282] =
      p12_7 / (1 + p12_7) - p12_6 / (1 + p12_6) - θ * q12_13_7 + θ * q11_12_7 - (1 - θ) * q12_13_6 +
      (1 - θ) * q11_12_6
    cx[283] =
      p13_7 / (1 + p13_7) - p13_6 / (1 + p13_6) - θ * q13_14_7 - θ * q13_15_7 + θ * q12_13_7 -
      (1 - θ) * q13_14_6 - (1 - θ) * q13_15_6 + (1 - θ) * q12_13_6 - 1
    cx[284] = p14_7 / (1 + p14_7) - p14_6 / (1 + p14_6) + θ * q13_14_7 + (1 - θ) * q13_14_6
    cx[285] =
      p15_7 / (1 + p15_7) - p15_6 / (1 + p15_6) - θ * q15_16_7 + θ * q13_15_7 - (1 - θ) * q15_16_6 +
      (1 - θ) * q13_15_6 - 1
    cx[286] =
      p16_7 / (1 + p16_7) - p16_6 / (1 + p16_6) + θ * q15_16_7 + (1 - θ) * q15_16_6 - out16_7
    cx[287] =
      p17_7 / (1 + p17_7) - p17_6 / (1 + p17_6) - θ * q17_18_7 + θ * q1_17_7 - (1 - θ) * q17_18_6 +
      (1 - θ) * q1_17_6 - 1
    cx[288] =
      p18_7 / (1 + p18_7) - p18_6 / (1 + p18_6) - θ * q18_19_7 + θ * q17_18_7 - (1 - θ) * q18_19_6 +
      (1 - θ) * q17_18_6 - 1
    cx[289] =
      p19_7 / (1 + p19_7) - p19_6 / (1 + p19_6) - f19_20_7 + θ * q18_19_7 + (1 - θ) * q18_19_6
    cx[290] =
      p20_7 / (1 + p20_7) - p20_6 / (1 + p20_6) - θ * q20_21_7 + f19_20_7 - (1 - θ) * q20_21_6
    cx[291] =
      p21_7 / (1 + p21_7) - p21_6 / (1 + p21_6) - θ * q21_22_7 + θ * q20_21_7 - (1 - θ) * q21_22_6 +
      (1 - θ) * q20_21_6 - 1
    cx[292] =
      p22_7 / (1 + p22_7) - p22_6 / (1 + p22_6) - θ * q22_23_7 + θ * q21_22_7 - (1 - θ) * q22_23_6 +
      (1 - θ) * q21_22_6 - 1
    cx[293] =
      p23_7 / (1 + p23_7) - p23_6 / (1 + p23_6) + θ * q22_23_7 + (1 - θ) * q22_23_6 - out23_7
    cx[294] = p3_7 * r3_4_7 - p4_7
    cx[295] = p5_7 * r5_7_7 - p7_7
    cx[296] = p19_7 * r19_20_7 - p20_7
    cx[297] = p1_7 * p1_7 - p2_7 * p2_7 - h * (1 + γ * (p1_7 + p2_7)) * (abs(q1_2_7)^α)
    cx[298] = p1_7 * p1_7 - p17_7 * p17_7 - h * (1 + γ * (p1_7 + p17_7)) * (abs(q1_17_7)^α)
    cx[299] = p2_7 * p2_7 - p3_7 * p3_7 - h * (1 + γ * (p2_7 + p3_7)) * (abs(q2_3_7)^α)
    cx[300] = p4_7 * p4_7 - p5_7 * p5_7 - h * (1 + γ * (p4_7 + p5_7)) * (abs(q4_5_7)^α)
    cx[301] = p5_7 * p5_7 - p6_7 * p6_7 - h * (1 + γ * (p5_7 + p6_7)) * (abs(q5_6_7)^α)
    cx[302] = p7_7 * p7_7 - p8_7 * p8_7 - h * (1 + γ * (p7_7 + p8_7)) * (abs(q7_8_7)^α)
    cx[303] = p8_7 * p8_7 - p9_7 * p9_7 - h * (1 + γ * (p8_7 + p9_7)) * (abs(q8_9_7)^α)
    cx[304] = p8_7 * p8_7 - p10_7 * p10_7 - h * (1 + γ * (p8_7 + p10_7)) * (abs(q8_10_7)^α)
    cx[305] = p8_7 * p8_7 - p11_7 * p11_7 - h * (1 + γ * (p8_7 + p11_7)) * (abs(q8_11_7)^α)
    cx[306] = p11_7 * p11_7 - p12_7 * p12_7 - h * (1 + γ * (p11_7 + p12_7)) * (abs(q11_12_7)^α)
    cx[307] = p12_7 * p12_7 - p13_7 * p13_7 - h * (1 + γ * (p12_7 + p13_7)) * (abs(q12_13_7)^α)
    cx[308] = p13_7 * p13_7 - p14_7 * p14_7 - h * (1 + γ * (p13_7 + p14_7)) * (abs(q13_14_7)^α)
    cx[309] = p13_7 * p13_7 - p15_7 * p15_7 - h * (1 + γ * (p13_7 + p15_7)) * (abs(q13_15_7)^α)
    cx[310] = p15_7 * p15_7 - p16_7 * p16_7 - h * (1 + γ * (p15_7 + p16_7)) * (abs(q15_16_7)^α)
    cx[311] = p17_7 * p17_7 - p18_7 * p18_7 - h * (1 + γ * (p17_7 + p18_7)) * (abs(q17_18_7)^α)
    cx[312] = p18_7 * p18_7 - p19_7 * p19_7 - h * (1 + γ * (p18_7 + p19_7)) * (abs(q18_19_7)^α)
    cx[313] = p20_7 * p20_7 - p21_7 * p21_7 - h * (1 + γ * (p20_7 + p21_7)) * (abs(q20_21_7)^α)
    cx[314] = p21_7 * p21_7 - p22_7 * p22_7 - h * (1 + γ * (p21_7 + p22_7)) * (abs(q21_22_7)^α)
    cx[315] = p22_7 * p22_7 - p23_7 * p23_7 - h * (1 + γ * (p22_7 + p23_7)) * (abs(q22_23_7)^α)

    # time step 8

    cx[316] =
      p1_8 / (1 + p1_8) - p1_7 / (1 + p1_7) - θ * q1_17_8 - θ * q1_2_8 + in1_8 - (1 - θ) * q1_17_7 -
      (1 - θ) * q1_2_7
    cx[317] =
      p2_8 / (1 + p2_8) - p2_7 / (1 + p2_7) - θ * q2_3_8 + θ * q1_2_8 - (1 - θ) * q2_3_7 +
      (1 - θ) * q1_2_7 - 1
    cx[318] = p3_8 / (1 + p3_8) - p3_7 / (1 + p3_7) - f3_4_8 + θ * q2_3_8 + (1 - θ) * q2_3_7
    cx[319] = p4_8 / (1 + p4_8) - p4_7 / (1 + p4_7) - θ * q4_5_8 + f3_4_8 - (1 - θ) * q4_5_7
    cx[320] =
      p5_8 / (1 + p5_8) - p5_7 / (1 + p5_7) - θ * q5_6_8 - f5_7_8 + θ * q4_5_8 - (1 - θ) * q5_6_7 +
      (1 - θ) * q4_5_7
    cx[321] = p6_8 / (1 + p6_8) - p6_7 / (1 + p6_7) + θ * q5_6_8 + (1 - θ) * q5_6_7 - 1
    cx[322] = p7_8 / (1 + p7_8) - p7_7 / (1 + p7_7) - θ * q7_8_8 + f5_7_8 - (1 - θ) * q7_8_7
    cx[323] =
      p8_8 / (1 + p8_8) - p8_7 / (1 + p8_7) - θ * q8_9_8 - θ * q8_10_8 - θ * q8_11_8 + θ * q7_8_8 -
      (1 - θ) * q8_9_7 - (1 - θ) * q8_10_7 - (1 - θ) * q8_11_7 + (1 - θ) * q7_8_7
    cx[324] = p9_8 / (1 + p9_8) - p9_7 / (1 + p9_7) + θ * q8_9_8 + (1 - θ) * q8_9_7
    cx[325] = p10_8 / (1 + p10_8) - p10_7 / (1 + p10_7) + θ * q8_10_8 + (1 - θ) * q8_10_7 - 1
    cx[326] =
      p11_8 / (1 + p11_8) - p11_7 / (1 + p11_7) - θ * q11_12_8 + θ * q8_11_8 - (1 - θ) * q11_12_7 +
      (1 - θ) * q8_11_7
    cx[327] =
      p12_8 / (1 + p12_8) - p12_7 / (1 + p12_7) - θ * q12_13_8 + θ * q11_12_8 - (1 - θ) * q12_13_7 +
      (1 - θ) * q11_12_7
    cx[328] =
      p13_8 / (1 + p13_8) - p13_7 / (1 + p13_7) - θ * q13_14_8 - θ * q13_15_8 + θ * q12_13_8 -
      (1 - θ) * q13_14_7 - (1 - θ) * q13_15_7 + (1 - θ) * q12_13_7 - 1
    cx[329] = p14_8 / (1 + p14_8) - p14_7 / (1 + p14_7) + θ * q13_14_8 + (1 - θ) * q13_14_7
    cx[330] =
      p15_8 / (1 + p15_8) - p15_7 / (1 + p15_7) - θ * q15_16_8 + θ * q13_15_8 - (1 - θ) * q15_16_7 +
      (1 - θ) * q13_15_7 - 1
    cx[331] =
      p16_8 / (1 + p16_8) - p16_7 / (1 + p16_7) + θ * q15_16_8 + (1 - θ) * q15_16_7 - out16_8
    cx[332] =
      p17_8 / (1 + p17_8) - p17_7 / (1 + p17_7) - θ * q17_18_8 + θ * q1_17_8 - (1 - θ) * q17_18_7 +
      (1 - θ) * q1_17_7 - 1
    cx[333] =
      p18_8 / (1 + p18_8) - p18_7 / (1 + p18_7) - θ * q18_19_8 + θ * q17_18_8 - (1 - θ) * q18_19_7 +
      (1 - θ) * q17_18_7 - 1
    cx[334] =
      p19_8 / (1 + p19_8) - p19_7 / (1 + p19_7) - f19_20_8 + θ * q18_19_8 + (1 - θ) * q18_19_7
    cx[335] =
      p20_8 / (1 + p20_8) - p20_7 / (1 + p20_7) - θ * q20_21_8 + f19_20_8 - (1 - θ) * q20_21_7
    cx[336] =
      p21_8 / (1 + p21_8) - p21_7 / (1 + p21_7) - θ * q21_22_8 + θ * q20_21_8 - (1 - θ) * q21_22_7 +
      (1 - θ) * q20_21_7 - 1
    cx[337] =
      p22_8 / (1 + p22_8) - p22_7 / (1 + p22_7) - θ * q22_23_8 + θ * q21_22_8 - (1 - θ) * q22_23_7 +
      (1 - θ) * q21_22_7 - 1
    cx[338] =
      p23_8 / (1 + p23_8) - p23_7 / (1 + p23_7) + θ * q22_23_8 + (1 - θ) * q22_23_7 - out23_8
    cx[339] = p3_8 * r3_4_8 - p4_8
    cx[340] = p5_8 * r5_7_8 - p7_8
    cx[341] = p19_8 * r19_20_8 - p20_8
    cx[342] = p1_8 * p1_8 - p2_8 * p2_8 - h * (1 + γ * (p1_8 + p2_8)) * (abs(q1_2_8)^α)
    cx[343] = p1_8 * p1_8 - p17_8 * p17_8 - h * (1 + γ * (p1_8 + p17_8)) * (abs(q1_17_8)^α)
    cx[344] = p2_8 * p2_8 - p3_8 * p3_8 - h * (1 + γ * (p2_8 + p3_8)) * (abs(q2_3_8)^α)
    cx[345] = p4_8 * p4_8 - p5_8 * p5_8 - h * (1 + γ * (p4_8 + p5_8)) * (abs(q4_5_8)^α)
    cx[346] = p5_8 * p5_8 - p6_8 * p6_8 - h * (1 + γ * (p5_8 + p6_8)) * (abs(q5_6_8)^α)
    cx[347] = p7_8 * p7_8 - p8_8 * p8_8 - h * (1 + γ * (p7_8 + p8_8)) * (abs(q7_8_8)^α)
    cx[348] = p8_8 * p8_8 - p9_8 * p9_8 - h * (1 + γ * (p8_8 + p9_8)) * (abs(q8_9_8)^α)
    cx[349] = p8_8 * p8_8 - p10_8 * p10_8 - h * (1 + γ * (p8_8 + p10_8)) * (abs(q8_10_8)^α)
    cx[350] = p8_8 * p8_8 - p11_8 * p11_8 - h * (1 + γ * (p8_8 + p11_8)) * (abs(q8_11_8)^α)
    cx[351] = p11_8 * p11_8 - p12_8 * p12_8 - h * (1 + γ * (p11_8 + p12_8)) * (abs(q11_12_8)^α)
    cx[352] = p12_8 * p12_8 - p13_8 * p13_8 - h * (1 + γ * (p12_8 + p13_8)) * (abs(q12_13_8)^α)
    cx[353] = p13_8 * p13_8 - p14_8 * p14_8 - h * (1 + γ * (p13_8 + p14_8)) * (abs(q13_14_8)^α)
    cx[354] = p13_8 * p13_8 - p15_8 * p15_8 - h * (1 + γ * (p13_8 + p15_8)) * (abs(q13_15_8)^α)
    cx[355] = p15_8 * p15_8 - p16_8 * p16_8 - h * (1 + γ * (p15_8 + p16_8)) * (abs(q15_16_8)^α)
    cx[356] = p17_8 * p17_8 - p18_8 * p18_8 - h * (1 + γ * (p17_8 + p18_8)) * (abs(q17_18_8)^α)
    cx[357] = p18_8 * p18_8 - p19_8 * p19_8 - h * (1 + γ * (p18_8 + p19_8)) * (abs(q18_19_8)^α)
    cx[358] = p20_8 * p20_8 - p21_8 * p21_8 - h * (1 + γ * (p20_8 + p21_8)) * (abs(q20_21_8)^α)
    cx[359] = p21_8 * p21_8 - p22_8 * p22_8 - h * (1 + γ * (p21_8 + p22_8)) * (abs(q21_22_8)^α)
    cx[360] = p22_8 * p22_8 - p23_8 * p23_8 - h * (1 + γ * (p22_8 + p23_8)) * (abs(q22_23_8)^α)

    return cx
  end
  lvar = T[
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    1.0e-16,
    0.0,
    0.0,
    0.0,
    1.0,
    1.0,
    1.0,
    0.0,
    0.0,
    0.0,
    1.0,
    1.0,
    1.0,
    0.0,
    0.0,
    0.0,
    1.0,
    1.0,
    1.0,
    0.0,
    0.0,
    0.0,
    1.0,
    1.0,
    1.0,
    0.0,
    0.0,
    0.0,
    1.0,
    1.0,
    1.0,
    0.0,
    0.0,
    0.0,
    1.0,
    1.0,
    1.0,
    0.0,
    0.0,
    0.0,
    1.0,
    1.0,
    1.0,
    0.0,
    0.0,
    0.0,
    1.0,
    1.0,
    1.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
  ]
  uvar = T[
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    10.0,
    10.0,
    10.0,
    Inf,
    Inf,
    Inf,
    10.0,
    10.0,
    10.0,
    Inf,
    Inf,
    Inf,
    10.0,
    10.0,
    10.0,
    Inf,
    Inf,
    Inf,
    10.0,
    10.0,
    10.0,
    Inf,
    Inf,
    Inf,
    10.0,
    10.0,
    10.0,
    Inf,
    Inf,
    Inf,
    10.0,
    10.0,
    10.0,
    Inf,
    Inf,
    Inf,
    10.0,
    10.0,
    10.0,
    Inf,
    Inf,
    Inf,
    10.0,
    10.0,
    10.0,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
    Inf,
  ]
  lcon = zeros(T, 360)
  ucon = zeros(T, 360)

  return ADNLPModels.ADNLPModel!(f, x0, lvar, uvar, c!, lcon, ucon, name = "britgas"; kwargs...)
end
