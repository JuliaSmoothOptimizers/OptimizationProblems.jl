export kirby2

function kirby2(; use_nls::Bool = false, kwargs...)
  model = use_nls ? :nls : :nlp
  return kirby2(Val(model); kwargs...)
end

function kirby2(
  ::Val{:nlp};
  n::Int = default_nvar,
  type::Type{T} = Float64,
  kwargs...,
) where {T}
  y = Rational{Int}[
    00082//10000 965//100
    00112//10000 1074//100
    00149//10000 1181//100
    00198//10000 1288//100
    00248//10000 1406//100
    00324//10000 1528//100
    00420//10000 1663//100
    00549//10000 1819//100
    00719//10000 1988//100
    00963//10000 2184//100
    01291//10000 2400//100
    01710//10000 2625//100
    02314//10000 2886//100
    03227//10000 3185//100
    04809//10000 3579//100
    07084//10000 4018//100
    10220//10000 4474//100
    14580//10000 4953//100
    19520//10000 5394//100
    25410//10000 5829//100
    32230//10000 6263//100
    39990//10000 6703//100
    48520//10000 7125//100
    57320//10000 7522//100
    67270//10000 7933//100
    78350//10000 8356//100
    90250//10000 8775//100
    102670//10000 9193//100
    115780//10000 9610//100
    129440//10000 10028//100
    143770//10000 10446//100
    158560//10000 10866//100
    173310//10000 11271//100
    188850//10000 11688//100
    205750//10000 12133//100
    223200//10000 12579//100
    223030//10000 12579//100
    234600//10000 12874//100
    240600//10000 13027//100
    252720//10000 13333//100
    258530//10000 13479//100
    271100//10000 13793//100
    276580//10000 13933//100
    289240//10000 14246//100
    295110//10000 14390//100
    307100//10000 14691//100
    313500//10000 14851//100
    325200//10000 15141//100
    332300//10000 15317//100
    343300//10000 15597//100
    350600//10000 15776//100
    361700//10000 16056//100
    368400//10000 16230//100
    380100//10000 16521//100
    386700//10000 16690//100
    398700//10000 16992//100
    400300//10000 17032//100
    405000//10000 17154//100
    413700//10000 17379//100
    416700//10000 17457//100
    423100//10000 17625//100
    427300//10000 17734//100
    434600//10000 17919//100
    441400//10000 18102//100
    445500//10000 18208//100
    452200//10000 18388//100
    459200//10000 18575//100
    463000//10000 18680//100
    470000//10000 18863//100
    476800//10000 19045//100
    480600//10000 19148//100
    487400//10000 19335//100
    494100//10000 19522//100
    497600//10000 19623//100
    504300//10000 19805//100
    511100//10000 19997//100
    515000//10000 20106//100
    521200//10000 20283//100
    527600//10000 20469//100
    531800//10000 20586//100
    537800//10000 20758//100
    544600//10000 20950//100
    548300//10000 21065//100
    554000//10000 21233//100
    564300//10000 21543//100
    570300//10000 21716//100
    580000//10000 22021//100
    586100//10000 22198//100
    595800//10000 22506//100
    601100//10000 22679//100
    611000//10000 22992//100
    616500//10000 23169//100
    625900//10000 23477//100
    631200//10000 23660//100
    640300//10000 23963//100
    646200//10000 24150//100
    654900//10000 24448//100
    660300//10000 24640//100
    668900//10000 24935//100
    674200//10000 25132//100
    682300//10000 25422//100
    687700//10000 25624//100
    695900//10000 25911//100
    701100//10000 26118//100
    708600//10000 26402//100
    714300//10000 26613//100
    721600//10000 26894//100
    727000//10000 27109//100
    734000//10000 27387//100
    739300//10000 27608//100
    746000//10000 27883//100
    751600//10000 28108//100
    758200//10000 28381//100
    763400//10000 28611//100
    769800//10000 28881//100
    774800//10000 29108//100
    780800//10000 29375//100
    786000//10000 29599//100
    791700//10000 29864//100
    796200//10000 30084//100
    798800//10000 30202//100
    801900//10000 30348//100
    806600//10000 30565//100
    812200//10000 30827//100
    816600//10000 31041//100
    821600//10000 31301//100
    825900//10000 31512//100
    831400//10000 31771//100
    835000//10000 31979//100
    840000//10000 32236//100
    844000//10000 32442//100
    848900//10000 32698//100
    852600//10000 32901//100
    857400//10000 33156//100
    860700//10000 33356//100
    865400//10000 33610//100
    868900//10000 33808//100
    873200//10000 34060//100
    876500//10000 34257//100
    881000//10000 34508//100
    884300//10000 34702//100
    888300//10000 34952//100
    891200//10000 35144//100
    895400//10000 35393//100
    898500//10000 35583//100
    902500//10000 35832//100
    905500//10000 36020//100
    909300//10000 36267//100
    912000//10000 36453//100
    915500//10000 36700//100
    922000//10000 37130//100
  ]
  function f(x; y = y)
    return 1 // 2 * sum(
      (
        y[i, 1] -
        (x[1] + x[2] * y[i, 2] + x[3] * y[i, 2]^2) / (1 + x[4] * y[i, 2] + x[5] * y[i, 2]^2)
      )^2 for i = 1:151
    )
  end
  x0 = T[2, -0.1, 0.003, -0.001, 0.00001]
  return ADNLPModels.ADNLPModel(f, x0, name = "kirby2"; kwargs...)
end

function kirby2(
  ::Val{:nls};
  n::Int = default_nvar,
  type::Type{T} = Float64,
  kwargs...,
) where {T}
  y = Rational{Int}[
    00082//10000 965//100
    00112//10000 1074//100
    00149//10000 1181//100
    00198//10000 1288//100
    00248//10000 1406//100
    00324//10000 1528//100
    00420//10000 1663//100
    00549//10000 1819//100
    00719//10000 1988//100
    00963//10000 2184//100
    01291//10000 2400//100
    01710//10000 2625//100
    02314//10000 2886//100
    03227//10000 3185//100
    04809//10000 3579//100
    07084//10000 4018//100
    10220//10000 4474//100
    14580//10000 4953//100
    19520//10000 5394//100
    25410//10000 5829//100
    32230//10000 6263//100
    39990//10000 6703//100
    48520//10000 7125//100
    57320//10000 7522//100
    67270//10000 7933//100
    78350//10000 8356//100
    90250//10000 8775//100
    102670//10000 9193//100
    115780//10000 9610//100
    129440//10000 10028//100
    143770//10000 10446//100
    158560//10000 10866//100
    173310//10000 11271//100
    188850//10000 11688//100
    205750//10000 12133//100
    223200//10000 12579//100
    223030//10000 12579//100
    234600//10000 12874//100
    240600//10000 13027//100
    252720//10000 13333//100
    258530//10000 13479//100
    271100//10000 13793//100
    276580//10000 13933//100
    289240//10000 14246//100
    295110//10000 14390//100
    307100//10000 14691//100
    313500//10000 14851//100
    325200//10000 15141//100
    332300//10000 15317//100
    343300//10000 15597//100
    350600//10000 15776//100
    361700//10000 16056//100
    368400//10000 16230//100
    380100//10000 16521//100
    386700//10000 16690//100
    398700//10000 16992//100
    400300//10000 17032//100
    405000//10000 17154//100
    413700//10000 17379//100
    416700//10000 17457//100
    423100//10000 17625//100
    427300//10000 17734//100
    434600//10000 17919//100
    441400//10000 18102//100
    445500//10000 18208//100
    452200//10000 18388//100
    459200//10000 18575//100
    463000//10000 18680//100
    470000//10000 18863//100
    476800//10000 19045//100
    480600//10000 19148//100
    487400//10000 19335//100
    494100//10000 19522//100
    497600//10000 19623//100
    504300//10000 19805//100
    511100//10000 19997//100
    515000//10000 20106//100
    521200//10000 20283//100
    527600//10000 20469//100
    531800//10000 20586//100
    537800//10000 20758//100
    544600//10000 20950//100
    548300//10000 21065//100
    554000//10000 21233//100
    564300//10000 21543//100
    570300//10000 21716//100
    580000//10000 22021//100
    586100//10000 22198//100
    595800//10000 22506//100
    601100//10000 22679//100
    611000//10000 22992//100
    616500//10000 23169//100
    625900//10000 23477//100
    631200//10000 23660//100
    640300//10000 23963//100
    646200//10000 24150//100
    654900//10000 24448//100
    660300//10000 24640//100
    668900//10000 24935//100
    674200//10000 25132//100
    682300//10000 25422//100
    687700//10000 25624//100
    695900//10000 25911//100
    701100//10000 26118//100
    708600//10000 26402//100
    714300//10000 26613//100
    721600//10000 26894//100
    727000//10000 27109//100
    734000//10000 27387//100
    739300//10000 27608//100
    746000//10000 27883//100
    751600//10000 28108//100
    758200//10000 28381//100
    763400//10000 28611//100
    769800//10000 28881//100
    774800//10000 29108//100
    780800//10000 29375//100
    786000//10000 29599//100
    791700//10000 29864//100
    796200//10000 30084//100
    798800//10000 30202//100
    801900//10000 30348//100
    806600//10000 30565//100
    812200//10000 30827//100
    816600//10000 31041//100
    821600//10000 31301//100
    825900//10000 31512//100
    831400//10000 31771//100
    835000//10000 31979//100
    840000//10000 32236//100
    844000//10000 32442//100
    848900//10000 32698//100
    852600//10000 32901//100
    857400//10000 33156//100
    860700//10000 33356//100
    865400//10000 33610//100
    868900//10000 33808//100
    873200//10000 34060//100
    876500//10000 34257//100
    881000//10000 34508//100
    884300//10000 34702//100
    888300//10000 34952//100
    891200//10000 35144//100
    895400//10000 35393//100
    898500//10000 35583//100
    902500//10000 35832//100
    905500//10000 36020//100
    909300//10000 36267//100
    912000//10000 36453//100
    915500//10000 36700//100
    922000//10000 37130//100
  ]
  function F!(r, x)
    m = 151
    for i = 1:m
      r[i] =
        y[i, 1] -
        (x[1] + x[2] * y[i, 2] + x[3] * y[i, 2]^2) / (1 + x[4] * y[i, 2] + x[5] * y[i, 2]^2)
    end
    return r
  end
  x0 = T[2, -0.1, 0.003, -0.001, 0.00001]
  return ADNLPModels.ADNLSModel!(F!, x0, 151, name = "kirby2-nls"; kwargs...)
end
