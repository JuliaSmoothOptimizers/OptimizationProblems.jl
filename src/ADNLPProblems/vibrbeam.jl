export vibrbeam

function vibrbeam(; use_nls::Bool = false, kwargs...)
  model = use_nls ? :nls : :nlp
  return vibrbeam(Val(model); kwargs...)
end

function vibrbeam(
  ::Val{:nlp};
  n::Int = default_nvar,
  type::Val{T} = Val(Float64),
  kwargs...,
) where {T}
# Positions
X = Rational{Int}[
  391722 // 10000
  539707 // 10000
  479829 // 10000
  125925 // 10000
  165414 // 10000
  189548 // 10000
  277168 // 10000
  319201 // 10000
  456830 // 10000
  222524 // 10000
  339805 // 10000
  68425 // 10000
  351677 // 10000
  335682 // 10000
  433659 // 10000
  133835 // 10000
  257273 // 10000
  210230 // 10000
  109755 // 10000
  15323 // 10000
  454416 // 10000
  145431 // 10000
  224313 // 10000
  290144 // 10000
  252675 // 10000
  155095 // 10000
  96297 // 10000
  83009 // 10000
  308694 // 10000
  433299 // 10000
]


# Velocity magnitude
V = Rational{Int}[
  -12026 // 10000
  17053 // 10000
  05410 // 10000
  11477 // 10000
  12447 // 10000
  09428 // 10000
  -01360 // 10000
  -07542 // 10000
  -03396 // 10000
  07057 // 10000
  -08509 // 10000
  -01201 // 10000
  -12193 // 10000
  -10448 // 10000
  -07723 // 10000
  04342 // 10000
  01154 // 10000
  02868 // 10000
  03558 // 10000
  -05090 // 10000
  -00842 // 10000
  06021 // 10000
  01197 // 10000
  -01827 // 10000
  01806 // 10000
  05395 // 10000
  02072 // 10000
  01466 // 10000
  -02672 // 10000
  -03038 // 10000
]

# Angle of incidence
P = Rational{Int}[
  25736 // 10000
  27078 // 10000
  26613 // 10000
  20374 // 10000
  21553 // 10000
  22195 // 10000
  24077 // 10000
  24772 // 10000
  26409 // 10000
  22981 // 10000
  25073 // 10000
  18380 // 10000
  25236 // 10000
  25015 // 10000
  26186 // 10000
  04947 // 10000
  06062 // 10000
  05588 // 10000
  04772 // 10000
  04184 // 10000
  09051 // 10000
  05035 // 10000
  05723 // 10000
  06437 // 10000
  06013 // 10000
  05111 // 10000
  04679 // 10000
  04590 // 10000
  06666 // 10000
  08630 // 10000
]
  function f(x; X = X, V = V, P = P)
    c = view(x, 1:4)
    d = view(x, 5:8)
    m = 30
    return 1 // 2 * sum(((c[1] + X[i] * (c[2] + X[i] * (c[3] + c[4] * X[i])) ) * cos( d[1] + X[i] * (d[2] + X[i] * (d[3] + d[4] * X[i])) - P[i] ) - V[i])^2 for i = 1:m)
  end
  x0 = T[-3.5; 1; 0; 0; 1.7; 0; 0; 0]
  return ADNLPModels.ADNLPModel(f, x0, name = "vibrbeam"; kwargs...)
end

function vibrbeam(
  ::Val{:nls};
  n::Int = default_nvar,
  type::Val{T} = Val(Float64),
  kwargs...,
) where {T}
# Positions
X = Rational{Int}[
  391722 // 10000
  539707 // 10000
  479829 // 10000
  125925 // 10000
  165414 // 10000
  189548 // 10000
  277168 // 10000
  319201 // 10000
  456830 // 10000
  222524 // 10000
  339805 // 10000
  68425 // 10000
  351677 // 10000
  335682 // 10000
  433659 // 10000
  133835 // 10000
  257273 // 10000
  210230 // 10000
  109755 // 10000
  15323 // 10000
  454416 // 10000
  145431 // 10000
  224313 // 10000
  290144 // 10000
  252675 // 10000
  155095 // 10000
  96297 // 10000
  83009 // 10000
  308694 // 10000
  433299 // 10000
]


# Velocity magnitude
V = Rational{Int}[
  -12026 // 10000
  17053 // 10000
  05410 // 10000
  11477 // 10000
  12447 // 10000
  09428 // 10000
  -01360 // 10000
  -07542 // 10000
  -03396 // 10000
  07057 // 10000
  -08509 // 10000
  -01201 // 10000
  -12193 // 10000
  -10448 // 10000
  -07723 // 10000
  04342 // 10000
  01154 // 10000
  02868 // 10000
  03558 // 10000
  -05090 // 10000
  -00842 // 10000
  06021 // 10000
  01197 // 10000
  -01827 // 10000
  01806 // 10000
  05395 // 10000
  02072 // 10000
  01466 // 10000
  -02672 // 10000
  -03038 // 10000
]

# Angle of incidence
P = Rational{Int}[
  25736 // 10000
  27078 // 10000
  26613 // 10000
  20374 // 10000
  21553 // 10000
  22195 // 10000
  24077 // 10000
  24772 // 10000
  26409 // 10000
  22981 // 10000
  25073 // 10000
  18380 // 10000
  25236 // 10000
  25015 // 10000
  26186 // 10000
  04947 // 10000
  06062 // 10000
  05588 // 10000
  04772 // 10000
  04184 // 10000
  09051 // 10000
  05035 // 10000
  05723 // 10000
  06437 // 10000
  06013 // 10000
  05111 // 10000
  04679 // 10000
  04590 // 10000
  06666 // 10000
  08630 // 10000
]
  function F!(r, x; X = X, V = V, P = P)
    c = view(x, 1:4)
    d = view(x, 5:8)
    m = 30
    for i = 1:m
      r[i] = (c[1] + X[i] * (c[2] + X[i] * (c[3] + c[4] * X[i])) ) * cos( d[1] + X[i] * (d[2] + X[i] * (d[3] + d[4] * X[i])) - P[i] ) - V[i]
    end
    return r
  end
  x0 = T[-3.5; 1; 0; 0; 1.7; 0; 0; 0]
  return ADNLPModels.ADNLSModel!(F!, x0, 30, name = "vibrbeam-nls"; kwargs...)
end
